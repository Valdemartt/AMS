
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00000280  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000280  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fba  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000db4  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d6  00000000  00000000  0000214a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00002620  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000623  00000000  00000000  000026f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000226  00000000  00000000  00002d17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002f3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e8       	ldi	r30, 0x80	; 128
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 30       	cpi	r26, 0x0E	; 14
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	b5 c0       	rjmp	.+362    	; 0x27c <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:
#include "uart.h"

int main(void)
{
    /* Replace with your application code */
    InitUART(9600, 8, 'N');
 114:	2e e4       	ldi	r18, 0x4E	; 78
 116:	48 e0       	ldi	r20, 0x08	; 8
 118:	60 e8       	ldi	r22, 0x80	; 128
 11a:	75 e2       	ldi	r23, 0x25	; 37
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0d d0       	rcall	.+26     	; 0x13c <InitUART>
	while(1)
	{
		SendString("Oskar er lang");
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	92 e0       	ldi	r25, 0x02	; 2
 126:	7a d0       	rcall	.+244    	; 0x21c <SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	83 ed       	ldi	r24, 0xD3	; 211
 12c:	90 e3       	ldi	r25, 0x30	; 48
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x1a>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x24>
 138:	00 00       	nop
 13a:	f3 cf       	rjmp	.-26     	; 0x122 <main+0xe>

0000013c <InitUART>:
  // Wait for new character received
  while ( (UCSR0A & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDR0;
}
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	52 2f       	mov	r21, r18
 14a:	8b 01       	movw	r16, r22
 14c:	9c 01       	movw	r18, r24
 14e:	0c 52       	subi	r16, 0x2C	; 44
 150:	11 40       	sbci	r17, 0x01	; 1
 152:	21 09       	sbc	r18, r1
 154:	31 09       	sbc	r19, r1
 156:	05 3d       	cpi	r16, 0xD5	; 213
 158:	10 4c       	sbci	r17, 0xC0	; 192
 15a:	21 40       	sbci	r18, 0x01	; 1
 15c:	31 05       	cpc	r19, r1
 15e:	08 f0       	brcs	.+2      	; 0x162 <InitUART+0x26>
 160:	4e c0       	rjmp	.+156    	; 0x1fe <InitUART+0xc2>
 162:	45 50       	subi	r20, 0x05	; 5
 164:	44 30       	cpi	r20, 0x04	; 4
 166:	08 f0       	brcs	.+2      	; 0x16a <InitUART+0x2e>
 168:	4a c0       	rjmp	.+148    	; 0x1fe <InitUART+0xc2>
 16a:	20 e2       	ldi	r18, 0x20	; 32
 16c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 170:	28 e1       	ldi	r18, 0x18	; 24
 172:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 176:	44 0f       	add	r20, r20
 178:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 17c:	55 34       	cpi	r21, 0x45	; 69
 17e:	31 f4       	brne	.+12     	; 0x18c <InitUART+0x50>
 180:	e2 ec       	ldi	r30, 0xC2	; 194
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	20 81       	ld	r18, Z
 186:	20 62       	ori	r18, 0x20	; 32
 188:	20 83       	st	Z, r18
 18a:	07 c0       	rjmp	.+14     	; 0x19a <InitUART+0x5e>
 18c:	5f 34       	cpi	r21, 0x4F	; 79
 18e:	29 f4       	brne	.+10     	; 0x19a <InitUART+0x5e>
 190:	e2 ec       	ldi	r30, 0xC2	; 194
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	20 81       	ld	r18, Z
 196:	20 63       	ori	r18, 0x30	; 48
 198:	20 83       	st	Z, r18
 19a:	6b 01       	movw	r12, r22
 19c:	7c 01       	movw	r14, r24
 19e:	20 e8       	ldi	r18, 0x80	; 128
 1a0:	c2 0e       	add	r12, r18
 1a2:	24 e8       	ldi	r18, 0x84	; 132
 1a4:	d2 1e       	adc	r13, r18
 1a6:	2e e1       	ldi	r18, 0x1E	; 30
 1a8:	e2 1e       	adc	r14, r18
 1aa:	f1 1c       	adc	r15, r1
 1ac:	cc 0c       	add	r12, r12
 1ae:	dd 1c       	adc	r13, r13
 1b0:	ee 1c       	adc	r14, r14
 1b2:	ff 1c       	adc	r15, r15
 1b4:	cc 0c       	add	r12, r12
 1b6:	dd 1c       	adc	r13, r13
 1b8:	ee 1c       	adc	r14, r14
 1ba:	ff 1c       	adc	r15, r15
 1bc:	cc 0c       	add	r12, r12
 1be:	dd 1c       	adc	r13, r13
 1c0:	ee 1c       	adc	r14, r14
 1c2:	ff 1c       	adc	r15, r15
 1c4:	dc 01       	movw	r26, r24
 1c6:	cb 01       	movw	r24, r22
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	aa 1f       	adc	r26, r26
 1ce:	bb 1f       	adc	r27, r27
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	aa 1f       	adc	r26, r26
 1d6:	bb 1f       	adc	r27, r27
 1d8:	9c 01       	movw	r18, r24
 1da:	ad 01       	movw	r20, r26
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	44 1f       	adc	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	44 1f       	adc	r20, r20
 1ea:	55 1f       	adc	r21, r21
 1ec:	c7 01       	movw	r24, r14
 1ee:	b6 01       	movw	r22, r12
 1f0:	23 d0       	rcall	.+70     	; 0x238 <__udivmodsi4>
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	31 09       	sbc	r19, r1
 1f6:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 1fa:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	df 90       	pop	r13
 208:	cf 90       	pop	r12
 20a:	08 95       	ret

0000020c <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR0A & (1<<5)) == 0 )
 20c:	e0 ec       	ldi	r30, 0xC0	; 192
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	90 81       	ld	r25, Z
 212:	95 ff       	sbrs	r25, 5
 214:	fd cf       	rjmp	.-6      	; 0x210 <SendChar+0x4>
  {}
  // Then send the character
  UDR0 = Tegn;
 216:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 21a:	08 95       	ret

0000021c <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ec 01       	movw	r28, r24
  // Repeat until zero-termination
  while (*Streng != 0)
 222:	88 81       	ld	r24, Y
 224:	88 23       	and	r24, r24
 226:	29 f0       	breq	.+10     	; 0x232 <SendString+0x16>
 228:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
 22a:	f0 df       	rcall	.-32     	; 0x20c <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 22c:	89 91       	ld	r24, Y+
 22e:	81 11       	cpse	r24, r1
 230:	fc cf       	rjmp	.-8      	; 0x22a <SendString+0xe>
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <__udivmodsi4>:
 238:	a1 e2       	ldi	r26, 0x21	; 33
 23a:	1a 2e       	mov	r1, r26
 23c:	aa 1b       	sub	r26, r26
 23e:	bb 1b       	sub	r27, r27
 240:	fd 01       	movw	r30, r26
 242:	0d c0       	rjmp	.+26     	; 0x25e <__udivmodsi4_ep>

00000244 <__udivmodsi4_loop>:
 244:	aa 1f       	adc	r26, r26
 246:	bb 1f       	adc	r27, r27
 248:	ee 1f       	adc	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	a2 17       	cp	r26, r18
 24e:	b3 07       	cpc	r27, r19
 250:	e4 07       	cpc	r30, r20
 252:	f5 07       	cpc	r31, r21
 254:	20 f0       	brcs	.+8      	; 0x25e <__udivmodsi4_ep>
 256:	a2 1b       	sub	r26, r18
 258:	b3 0b       	sbc	r27, r19
 25a:	e4 0b       	sbc	r30, r20
 25c:	f5 0b       	sbc	r31, r21

0000025e <__udivmodsi4_ep>:
 25e:	66 1f       	adc	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	88 1f       	adc	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	1a 94       	dec	r1
 268:	69 f7       	brne	.-38     	; 0x244 <__udivmodsi4_loop>
 26a:	60 95       	com	r22
 26c:	70 95       	com	r23
 26e:	80 95       	com	r24
 270:	90 95       	com	r25
 272:	9b 01       	movw	r18, r22
 274:	ac 01       	movw	r20, r24
 276:	bd 01       	movw	r22, r26
 278:	cf 01       	movw	r24, r30
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
