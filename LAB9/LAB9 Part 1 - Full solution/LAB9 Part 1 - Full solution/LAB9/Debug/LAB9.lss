
LAB9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800200  0000081a  000008ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020a  00800248  00800248  000008f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c7c  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f36  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a9a  00000000  00000000  0000360a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000040a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ef  00000000  00000000  000042d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009db  00000000  00000000  000049c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000539e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e1       	ldi	r30, 0x1A	; 26
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 34       	cpi	r26, 0x48	; 72
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a8 e4       	ldi	r26, 0x48	; 72
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 35       	cpi	r26, 0x52	; 82
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	7a c3       	rjmp	.+1780   	; 0x816 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#define Block_2 1234567

int main(void)
{
	//Setup SD/SPI drivers
	SD_init();
 124:	08 d1       	rcall	.+528    	; 0x336 <SD_init>
	InitUART(9600, 8);
 126:	48 e0       	ldi	r20, 0x08	; 8
 128:	60 e8       	ldi	r22, 0x80	; 128
 12a:	75 e2       	ldi	r23, 0x25	; 37
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	44 d2       	rcall	.+1160   	; 0x5ba <InitUART>
	
	while(1)
	{
        SD_readSingleBlock(Block_1);
 132:	6e ec       	ldi	r22, 0xCE	; 206
 134:	72 e0       	ldi	r23, 0x02	; 2
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	a4 d1       	rcall	.+840    	; 0x484 <SD_readSingleBlock>
		SendString("\nBlock ");
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	92 e0       	ldi	r25, 0x02	; 2
 140:	a4 d2       	rcall	.+1352   	; 0x68a <SendString>
 142:	6e ec       	ldi	r22, 0xCE	; 206
		SendLong(Block_1);
 144:	72 e0       	ldi	r23, 0x02	; 2
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	c6 d2       	rcall	.+1420   	; 0x6d8 <SendLong>
		SendString(" =\n");
 14c:	88 e0       	ldi	r24, 0x08	; 8
 14e:	92 e0       	ldi	r25, 0x02	; 2
 150:	9c d2       	rcall	.+1336   	; 0x68a <SendString>
 152:	c0 e0       	ldi	r28, 0x00	; 0
		for (int i = 0; i<512; i++)
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	09 c0       	rjmp	.+18     	; 0x16a <main+0x46>
        {
	        SendInteger(buffer[i]);
 158:	fe 01       	movw	r30, r28
 15a:	e4 5b       	subi	r30, 0xB4	; 180
 15c:	fd 4f       	sbci	r31, 0xFD	; 253
 15e:	80 81       	ld	r24, Z
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	9f d2       	rcall	.+1342   	; 0x6a2 <SendInteger>
			SendChar(' ');
 164:	80 e2       	ldi	r24, 0x20	; 32
 166:	8a d2       	rcall	.+1300   	; 0x67c <SendChar>
 168:	21 96       	adiw	r28, 0x01	; 1
	{
        SD_readSingleBlock(Block_1);
		SendString("\nBlock ");
		SendLong(Block_1);
		SendString(" =\n");
		for (int i = 0; i<512; i++)
 16a:	c1 15       	cp	r28, r1
 16c:	22 e0       	ldi	r18, 0x02	; 2
 16e:	d2 07       	cpc	r29, r18
 170:	9c f3       	brlt	.-26     	; 0x158 <main+0x34>
        {
	        SendInteger(buffer[i]);
			SendChar(' ');
        }
		
        SD_readSingleBlock(Block_2);
 172:	67 e8       	ldi	r22, 0x87	; 135
 174:	76 ed       	ldi	r23, 0xD6	; 214
 176:	82 e1       	ldi	r24, 0x12	; 18
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	84 d1       	rcall	.+776    	; 0x484 <SD_readSingleBlock>
		SendString("\nBlock ");
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	92 e0       	ldi	r25, 0x02	; 2
 180:	84 d2       	rcall	.+1288   	; 0x68a <SendString>
		SendLong(Block_2);
 182:	67 e8       	ldi	r22, 0x87	; 135
 184:	76 ed       	ldi	r23, 0xD6	; 214
 186:	82 e1       	ldi	r24, 0x12	; 18
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	a6 d2       	rcall	.+1356   	; 0x6d8 <SendLong>
 18c:	88 e0       	ldi	r24, 0x08	; 8
		SendString(" =\n");
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	7c d2       	rcall	.+1272   	; 0x68a <SendString>
		for (int i = 0; i<512; i++)
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	d0 e0       	ldi	r29, 0x00	; 0
 196:	09 c0       	rjmp	.+18     	; 0x1aa <main+0x86>
		{
			SendInteger(buffer[i]);
 198:	fe 01       	movw	r30, r28
 19a:	e4 5b       	subi	r30, 0xB4	; 180
 19c:	fd 4f       	sbci	r31, 0xFD	; 253
 19e:	80 81       	ld	r24, Z
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	7f d2       	rcall	.+1278   	; 0x6a2 <SendInteger>
			SendChar(' ');
 1a4:	80 e2       	ldi	r24, 0x20	; 32
 1a6:	6a d2       	rcall	.+1236   	; 0x67c <SendChar>
 1a8:	21 96       	adiw	r28, 0x01	; 1
		
        SD_readSingleBlock(Block_2);
		SendString("\nBlock ");
		SendLong(Block_2);
		SendString(" =\n");
		for (int i = 0; i<512; i++)
 1aa:	c1 15       	cp	r28, r1
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	d8 07       	cpc	r29, r24
 1b0:	9c f3       	brlt	.-26     	; 0x198 <main+0x74>
		{
			SendInteger(buffer[i]);
			SendChar(' ');
		}
		char x = ReadChar();
 1b2:	5d d2       	rcall	.+1210   	; 0x66e <ReadChar>
 1b4:	c8 2f       	mov	r28, r24
		
		if (x == 'e')
 1b6:	85 36       	cpi	r24, 0x65	; 101
 1b8:	e1 f4       	brne	.+56     	; 0x1f2 <main+0xce>
		{
	        SD_erase (Block_1, Block_2-Block_1+1);			
 1ba:	2a eb       	ldi	r18, 0xBA	; 186
 1bc:	33 ed       	ldi	r19, 0xD3	; 211
 1be:	42 e1       	ldi	r20, 0x12	; 18
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	6e ec       	ldi	r22, 0xCE	; 206
 1c4:	72 e0       	ldi	r23, 0x02	; 2
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
		    SendString("\nSD Blocks from ");
 1ca:	2e d1       	rcall	.+604    	; 0x428 <SD_erase>
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	92 e0       	ldi	r25, 0x02	; 2
		    SendLong(Block_1);
 1d0:	5c d2       	rcall	.+1208   	; 0x68a <SendString>
 1d2:	6e ec       	ldi	r22, 0xCE	; 206
 1d4:	72 e0       	ldi	r23, 0x02	; 2
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	7e d2       	rcall	.+1276   	; 0x6d8 <SendLong>
		    SendString(" to ");
 1dc:	8d e1       	ldi	r24, 0x1D	; 29
 1de:	92 e0       	ldi	r25, 0x02	; 2
 1e0:	54 d2       	rcall	.+1192   	; 0x68a <SendString>
 1e2:	67 e8       	ldi	r22, 0x87	; 135
		    SendLong(Block_2);
 1e4:	76 ed       	ldi	r23, 0xD6	; 214
 1e6:	82 e1       	ldi	r24, 0x12	; 18
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	76 d2       	rcall	.+1260   	; 0x6d8 <SendLong>
 1ec:	82 e2       	ldi	r24, 0x22	; 34
 1ee:	92 e0       	ldi	r25, 0x02	; 2
		    SendString("erased\n");									
 1f0:	4c d2       	rcall	.+1176   	; 0x68a <SendString>
 1f2:	c1 33       	cpi	r28, 0x31	; 49
 1f4:	e9 f4       	brne	.+58     	; 0x230 <main+0x10c>
		}
		
		if (x == '1')
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <main+0xe0>
 1f8:	fc 01       	movw	r30, r24
		{
			for (int i = 0; i<512; i++)
			{
				buffer[i] = i;
 1fa:	e4 5b       	subi	r30, 0xB4	; 180
 1fc:	fd 4f       	sbci	r31, 0xFD	; 253
 1fe:	80 83       	st	Z, r24
		    SendString("erased\n");									
		}
		
		if (x == '1')
		{
			for (int i = 0; i<512; i++)
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	02 c0       	rjmp	.+4      	; 0x208 <main+0xe4>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	81 15       	cp	r24, r1
 20a:	22 e0       	ldi	r18, 0x02	; 2
 20c:	92 07       	cpc	r25, r18
			{
				buffer[i] = i;
			}
			SD_writeSingleBlock(Block_1);			
 20e:	a4 f3       	brlt	.-24     	; 0x1f8 <main+0xd4>
 210:	6e ec       	ldi	r22, 0xCE	; 206
 212:	72 e0       	ldi	r23, 0x02	; 2
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	62 d1       	rcall	.+708    	; 0x4de <SD_writeSingleBlock>
			SendString("\nBlock ");
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	92 e0       	ldi	r25, 0x02	; 2
 21e:	35 d2       	rcall	.+1130   	; 0x68a <SendString>
 220:	6e ec       	ldi	r22, 0xCE	; 206
			SendLong(Block_1);
 222:	72 e0       	ldi	r23, 0x02	; 2
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	57 d2       	rcall	.+1198   	; 0x6d8 <SendLong>
 22a:	8a e2       	ldi	r24, 0x2A	; 42
			SendString(" programmed with 0,1,2,3,...\n");
 22c:	92 e0       	ldi	r25, 0x02	; 2
 22e:	2d d2       	rcall	.+1114   	; 0x68a <SendString>
 230:	c2 33       	cpi	r28, 0x32	; 50
		}
		
		if (x == '2')
 232:	09 f0       	breq	.+2      	; 0x236 <main+0x112>
 234:	7e cf       	rjmp	.-260    	; 0x132 <main+0xe>
 236:	06 c0       	rjmp	.+12     	; 0x244 <main+0x120>
		{
			for (int i = 0; i<512; i++)
			{
				buffer[i] = i;
 238:	fc 01       	movw	r30, r24
 23a:	e4 5b       	subi	r30, 0xB4	; 180
 23c:	fd 4f       	sbci	r31, 0xFD	; 253
			SendString(" programmed with 0,1,2,3,...\n");
		}
		
		if (x == '2')
		{
			for (int i = 0; i<512; i++)
 23e:	80 83       	st	Z, r24
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	02 c0       	rjmp	.+4      	; 0x248 <main+0x124>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	81 15       	cp	r24, r1
 24a:	22 e0       	ldi	r18, 0x02	; 2
 24c:	92 07       	cpc	r25, r18
			{
				buffer[i] = i;
			}
			SD_writeSingleBlock(Block_2);
 24e:	a4 f3       	brlt	.-24     	; 0x238 <main+0x114>
 250:	67 e8       	ldi	r22, 0x87	; 135
 252:	76 ed       	ldi	r23, 0xD6	; 214
 254:	82 e1       	ldi	r24, 0x12	; 18
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	42 d1       	rcall	.+644    	; 0x4de <SD_writeSingleBlock>
			SendString("\nBlock ");
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	92 e0       	ldi	r25, 0x02	; 2
 25e:	15 d2       	rcall	.+1066   	; 0x68a <SendString>
 260:	67 e8       	ldi	r22, 0x87	; 135
			SendLong(Block_2);
 262:	76 ed       	ldi	r23, 0xD6	; 214
 264:	82 e1       	ldi	r24, 0x12	; 18
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	37 d2       	rcall	.+1134   	; 0x6d8 <SendLong>
 26a:	8a e2       	ldi	r24, 0x2A	; 42
 26c:	92 e0       	ldi	r25, 0x02	; 2
			SendString(" programmed with 0,1,2,3,...\n");
 26e:	0d d2       	rcall	.+1050   	; 0x68a <SendString>
 270:	60 cf       	rjmp	.-320    	; 0x132 <main+0xe>

00000272 <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
 272:	cf 92       	push	r12
 274:	df 92       	push	r13
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	18 2f       	mov	r17, r24
 282:	6a 01       	movw	r12, r20
 284:	7b 01       	movw	r14, r22

	//SD card accepts byte address while SDHC accepts block address in multiples of 512
	//so, if it's SD card we need to convert block address into corresponding byte address by 
	//multiplying it with 512. which is equivalent to shifting it left 9 times.
	//The following 'if' statement does that
	if(SDHC_flag == 0)
 286:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <SDHC_flag>
 28a:	81 11       	cpse	r24, r1
 28c:	15 c0       	rjmp	.+42     	; 0x2b8 <SD_sendCommand+0x46>
	{
		if(cmd == READ_SINGLE_BLOCK      ||
 28e:	8f ee       	ldi	r24, 0xEF	; 239
 290:	81 0f       	add	r24, r17
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	40 f0       	brcs	.+16     	; 0x2a6 <SD_sendCommand+0x34>
		   cmd == READ_MULTIPLE_BLOCKS   ||
 296:	18 31       	cpi	r17, 0x18	; 24
 298:	31 f0       	breq	.+12     	; 0x2a6 <SD_sendCommand+0x34>
		   cmd == WRITE_SINGLE_BLOCK     ||
 29a:	19 31       	cpi	r17, 0x19	; 25
 29c:	21 f0       	breq	.+8      	; 0x2a6 <SD_sendCommand+0x34>
		   cmd == WRITE_MULTIPLE_BLOCKS  ||
 29e:	10 32       	cpi	r17, 0x20	; 32
 2a0:	11 f0       	breq	.+4      	; 0x2a6 <SD_sendCommand+0x34>
		   cmd == ERASE_BLOCK_START_ADDR ||
 2a2:	11 32       	cpi	r17, 0x21	; 33
 2a4:	49 f4       	brne	.+18     	; 0x2b8 <SD_sendCommand+0x46>
		   cmd == ERASE_BLOCK_END_ADDR)
		   {
			   arg = arg << 9;
 2a6:	0b 2e       	mov	r0, r27
 2a8:	b9 e0       	ldi	r27, 0x09	; 9
 2aa:	cc 0c       	add	r12, r12
 2ac:	dd 1c       	adc	r13, r13
 2ae:	ee 1c       	adc	r14, r14
 2b0:	ff 1c       	adc	r15, r15
 2b2:	ba 95       	dec	r27
 2b4:	d1 f7       	brne	.-12     	; 0x2aa <SD_sendCommand+0x38>
 2b6:	b0 2d       	mov	r27, r0
		   }
    }

	SPI_Chip_Select();
 2b8:	78 d1       	rcall	.+752    	; 0x5aa <SPI_Chip_Select>
	SPI_transmit(cmd | 0b01000000); //send command, the first two bits are always '01'
 2ba:	81 2f       	mov	r24, r17
 2bc:	80 64       	ori	r24, 0x40	; 64
 2be:	68 d1       	rcall	.+720    	; 0x590 <SPI_transmit>
	SPI_transmit(arg >> 24);
 2c0:	8f 2d       	mov	r24, r15
 2c2:	66 d1       	rcall	.+716    	; 0x590 <SPI_transmit>
	SPI_transmit(arg >> 16);
 2c4:	8e 2d       	mov	r24, r14
 2c6:	64 d1       	rcall	.+712    	; 0x590 <SPI_transmit>
	SPI_transmit(arg >> 8);
 2c8:	8d 2d       	mov	r24, r13
 2ca:	62 d1       	rcall	.+708    	; 0x590 <SPI_transmit>
 2cc:	8c 2d       	mov	r24, r12
	SPI_transmit(arg);
 2ce:	60 d1       	rcall	.+704    	; 0x590 <SPI_transmit>
 2d0:	18 30       	cpi	r17, 0x08	; 8

	if(cmd == SEND_IF_COND)	//it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
 2d2:	19 f4       	brne	.+6      	; 0x2da <SD_sendCommand+0x68>
		SPI_transmit(0x87); //for remaining commands, CRC is ignored in SPI mode
 2d4:	87 e8       	ldi	r24, 0x87	; 135
 2d6:	5c d1       	rcall	.+696    	; 0x590 <SPI_transmit>
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <SD_sendCommand+0x7a>
 2da:	85 e9       	ldi	r24, 0x95	; 149
	else 
		SPI_transmit(0x95); 
 2dc:	59 d1       	rcall	.+690    	; 0x590 <SPI_transmit>
 2de:	06 c0       	rjmp	.+12     	; 0x2ec <SD_sendCommand+0x7a>
 2e0:	81 e0       	ldi	r24, 0x01	; 1

	while((response = SPI_receive()) == 0xff) //wait for response
	{
		if(retry++ > 254)
 2e2:	8c 0f       	add	r24, r28
 2e4:	cf 3f       	cpi	r28, 0xFF	; 255
 2e6:	39 f0       	breq	.+14     	; 0x2f6 <SD_sendCommand+0x84>
 2e8:	c8 2f       	mov	r28, r24
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <SD_sendCommand+0x7c>
 2ec:	c0 e0       	ldi	r28, 0x00	; 0
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
 2ee:	56 d1       	rcall	.+684    	; 0x59c <SPI_receive>
	if(cmd == SEND_IF_COND)	//it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
		SPI_transmit(0x87); //for remaining commands, CRC is ignored in SPI mode
	else 
		SPI_transmit(0x95); 

	while((response = SPI_receive()) == 0xff) //wait for response
 2f0:	d8 2f       	mov	r29, r24
 2f2:	8f 3f       	cpi	r24, 0xFF	; 255
 2f4:	a9 f3       	breq	.-22     	; 0x2e0 <SD_sendCommand+0x6e>
 2f6:	d1 11       	cpse	r29, r1
	{
		if(retry++ > 254)
			break; //time out error
	}

	if(response == 0x00 && cmd == READ_OCR) //checking response of CMD58
 2f8:	0e c0       	rjmp	.+28     	; 0x316 <SD_sendCommand+0xa4>
 2fa:	1a 33       	cpi	r17, 0x3A	; 58
 2fc:	61 f4       	brne	.+24     	; 0x316 <SD_sendCommand+0xa4>
 2fe:	4e d1       	rcall	.+668    	; 0x59c <SPI_receive>
	{
		status = SPI_receive() & 0x40; //first byte of the OCR register (bit 31:24)
 300:	86 ff       	sbrs	r24, 6
		if(status == 0x40)
 302:	04 c0       	rjmp	.+8      	; 0x30c <SD_sendCommand+0x9a>
			SDHC_flag = 1; //we need it to verify SDHC card
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <SDHC_flag>
		else
			SDHC_flag = 0;
 30a:	02 c0       	rjmp	.+4      	; 0x310 <SD_sendCommand+0x9e>

		SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
 30c:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <SDHC_flag>
		SPI_receive(); //one can use these bytes to check power supply limits of SD
 310:	45 d1       	rcall	.+650    	; 0x59c <SPI_receive>
 312:	44 d1       	rcall	.+648    	; 0x59c <SPI_receive>
		SPI_receive(); 
 314:	43 d1       	rcall	.+646    	; 0x59c <SPI_receive>
 316:	16 32       	cpi	r17, 0x26	; 38
	}

    // This is added by Henning Hargaard 6/3 2020 (Response = 1b => busy while reading 0)
	if (cmd == ERASE_SELECTED_BLOCKS)
 318:	19 f4       	brne	.+6      	; 0x320 <SD_sendCommand+0xae>
 31a:	40 d1       	rcall	.+640    	; 0x59c <SPI_receive>
	{
		while (SPI_receive() == 0)
 31c:	88 23       	and	r24, r24
 31e:	e9 f3       	breq	.-6      	; 0x31a <SD_sendCommand+0xa8>
 320:	3d d1       	rcall	.+634    	; 0x59c <SPI_receive>
 322:	47 d1       	rcall	.+654    	; 0x5b2 <SPI_Chip_Deselect>
		{}
	}
    
	SPI_receive(); //extra 8 CLK
 324:	8d 2f       	mov	r24, r29
 326:	df 91       	pop	r29
	SPI_Chip_Deselect();
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
	return response; //return state
}
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	df 90       	pop	r13
 332:	cf 90       	pop	r12
 334:	08 95       	ret

00000336 <SD_init>:
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	19 d1       	rcall	.+562    	; 0x570 <SPI_init>
	unsigned char i, response, SD_version;
	unsigned int retry = 0;	
	
	SPI_init();
		
	for(i = 0; i < 10; i++)
 33e:	c0 e0       	ldi	r28, 0x00	; 0
 340:	03 c0       	rjmp	.+6      	; 0x348 <SD_init+0x12>
	{
		SPI_transmit(0xff); //80 clock pulses before sending the first command (Only needs 76, but we just do 80 to be sure)
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	25 d1       	rcall	.+586    	; 0x590 <SPI_transmit>
	unsigned char i, response, SD_version;
	unsigned int retry = 0;	
	
	SPI_init();
		
	for(i = 0; i < 10; i++)
 346:	cf 5f       	subi	r28, 0xFF	; 255
 348:	ca 30       	cpi	r28, 0x0A	; 10
	{
		SPI_transmit(0xff); //80 clock pulses before sending the first command (Only needs 76, but we just do 80 to be sure)
	}
	
	SPI_Chip_Select();
 34a:	d8 f3       	brcs	.-10     	; 0x342 <SD_init+0xc>
 34c:	2e d1       	rcall	.+604    	; 0x5aa <SPI_Chip_Select>
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init()
{
	unsigned char i, response, SD_version;
	unsigned int retry = 0;	
 34e:	c0 e0       	ldi	r28, 0x00	; 0
 350:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	SPI_Chip_Select();
	do
	{
		response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command (= CMD0)
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	ba 01       	movw	r22, r20
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	8b df       	rcall	.-234    	; 0x272 <SD_sendCommand>
		retry++;
 35c:	21 96       	adiw	r28, 0x01	; 1
		if(retry > 0x20)
 35e:	c1 32       	cpi	r28, 0x21	; 33
 360:	d1 05       	cpc	r29, r1
 362:	08 f0       	brcs	.+2      	; 0x366 <SD_init+0x30>
			return 1; //time out, card not detected
	} while(response != 0x01); //repeat until SD is in IDLE state
 364:	5a c0       	rjmp	.+180    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>

	SPI_Chip_Deselect();
 366:	81 30       	cpi	r24, 0x01	; 1
	SPI_transmit (0xff);
 368:	a1 f7       	brne	.-24     	; 0x352 <SD_init+0x1c>
 36a:	23 d1       	rcall	.+582    	; 0x5b2 <SPI_Chip_Deselect>
 36c:	8f ef       	ldi	r24, 0xFF	; 255
	SPI_transmit (0xff);
 36e:	10 d1       	rcall	.+544    	; 0x590 <SPI_transmit>
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	0e d1       	rcall	.+540    	; 0x590 <SPI_transmit>

	retry = 0;
 374:	c0 e0       	ldi	r28, 0x00	; 0
	
	SD_version = 2; //default set to SD compliance with ver2.x;
					//this may change after checking the next command
	do
	{
		response = SD_sendCommand(SEND_IF_COND, 0x000001AA); //Check power supply status, mandatory for SDHC card (= CMD8)
 376:	d0 e0       	ldi	r29, 0x00	; 0
 378:	4a ea       	ldi	r20, 0xAA	; 170
 37a:	51 e0       	ldi	r21, 0x01	; 1
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	88 e0       	ldi	r24, 0x08	; 8
 382:	77 df       	rcall	.-274    	; 0x272 <SD_sendCommand>
		retry++;
 384:	21 96       	adiw	r28, 0x01	; 1
		if(retry > 0xfe)
 386:	cf 3f       	cpi	r28, 0xFF	; 255
 388:	d1 05       	cpc	r29, r1
 38a:	28 f0       	brcs	.+10     	; 0x396 <SD_init+0x60>
		{
			SD_version = 1;
			cardType = 1;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <cardType>
	{
		response = SD_sendCommand(SEND_IF_COND, 0x000001AA); //Check power supply status, mandatory for SDHC card (= CMD8)
		retry++;
		if(retry > 0xfe)
		{
			SD_version = 1;
 392:	11 e0       	ldi	r17, 0x01	; 1
			cardType = 1;
			break;
 394:	03 c0       	rjmp	.+6      	; 0x39c <SD_init+0x66>
		} //time out
	} while(response != 0x01);
 396:	81 30       	cpi	r24, 0x01	; 1
	SPI_transmit (0xff);
	SPI_transmit (0xff);

	retry = 0;
	
	SD_version = 2; //default set to SD compliance with ver2.x;
 398:	79 f7       	brne	.-34     	; 0x378 <SD_init+0x42>
			cardType = 1;
			break;
		} //time out
	} while(response != 0x01);
	
	retry = 0;
 39a:	12 e0       	ldi	r17, 0x02	; 2
 39c:	c0 e0       	ldi	r28, 0x00	; 0
	do
	{
		response = SD_sendCommand(APP_CMD, 0); //CMD55, must be sent before sending any ACMD command
 39e:	d0 e0       	ldi	r29, 0x00	; 0
 3a0:	40 e0       	ldi	r20, 0x00	; 0
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	ba 01       	movw	r22, r20
 3a6:	87 e3       	ldi	r24, 0x37	; 55
		response = SD_sendCommand(SD_SEND_OP_COND, 0x40000000); //ACMD41
 3a8:	64 df       	rcall	.-312    	; 0x272 <SD_sendCommand>
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	70 e4       	ldi	r23, 0x40	; 64
 3b2:	89 e2       	ldi	r24, 0x29	; 41
 3b4:	5e df       	rcall	.-324    	; 0x272 <SD_sendCommand>

		retry++;
 3b6:	21 96       	adiw	r28, 0x01	; 1
		if(retry > 0xfe)
 3b8:	cf 3f       	cpi	r28, 0xFF	; 255
 3ba:	d1 05       	cpc	r29, r1
 3bc:	80 f5       	brcc	.+96     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			return 2;  //time out, card initialization failed
	} while(response != 0x00);
 3be:	81 11       	cpse	r24, r1
 3c0:	ef cf       	rjmp	.-34     	; 0x3a0 <SD_init+0x6a>
	
	retry = 0;
	SDHC_flag = 0;
 3c2:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <SDHC_flag>
	
	if (SD_version == 2)
 3c6:	12 30       	cpi	r17, 0x02	; 2
 3c8:	d9 f4       	brne	.+54     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ca:	c0 e0       	ldi	r28, 0x00	; 0
	{
		do
		{
			response = SD_sendCommand(READ_OCR, 0); // (=CMD58)
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	ba 01       	movw	r22, r20
 3d4:	8a e3       	ldi	r24, 0x3A	; 58
 3d6:	4d df       	rcall	.-358    	; 0x272 <SD_sendCommand>
			retry++;
 3d8:	21 96       	adiw	r28, 0x01	; 1
			if(retry > 0xfe)
 3da:	cf 3f       	cpi	r28, 0xFF	; 255
 3dc:	d1 05       	cpc	r29, r1
 3de:	18 f0       	brcs	.+6      	; 0x3e6 <SD_init+0xb0>
			{
				cardType = 0;
 3e0:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <cardType>
				break;
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <SD_init+0xb4>
			} //time out
		} while(response != 0x00);
 3e6:	81 11       	cpse	r24, r1
 3e8:	f2 cf       	rjmp	.-28     	; 0x3ce <SD_init+0x98>
		
		if(SDHC_flag == 1)
 3ea:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <SDHC_flag>
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	21 f4       	brne	.+8      	; 0x3fa <SD_init+0xc4>
			cardType = 2;
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <cardType>
		else
			cardType = 3;
 3f8:	03 c0       	rjmp	.+6      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fa:	83 e0       	ldi	r24, 0x03	; 3
	}

	SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; default - CRC disabled in SPI mode
 3fc:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <cardType>
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	ba 01       	movw	r22, r20
 406:	8b e3       	ldi	r24, 0x3B	; 59
	SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512
 408:	34 df       	rcall	.-408    	; 0x272 <SD_sendCommand>
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	52 e0       	ldi	r21, 0x02	; 2
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	80 e1       	ldi	r24, 0x10	; 16
 414:	2e df       	rcall	.-420    	; 0x272 <SD_sendCommand>
	
	return 0; //successful return
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	03 c0       	rjmp	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	do
	{
		response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command (= CMD0)
		retry++;
		if(retry > 0x20)
			return 1; //time out, card not detected
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	01 c0       	rjmp	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		response = SD_sendCommand(APP_CMD, 0); //CMD55, must be sent before sending any ACMD command
		response = SD_sendCommand(SD_SEND_OP_COND, 0x40000000); //ACMD41

		retry++;
		if(retry > 0xfe)
			return 2;  //time out, card initialization failed
 41e:	82 e0       	ldi	r24, 0x02	; 2

	SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; default - CRC disabled in SPI mode
	SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512
	
	return 0; //successful return
}
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	08 95       	ret

00000428 <SD_erase>:
//Arguments	: None
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
 428:	8f 92       	push	r8
 42a:	9f 92       	push	r9
 42c:	af 92       	push	r10
 42e:	bf 92       	push	r11
 430:	cf 92       	push	r12
 432:	df 92       	push	r13
 434:	ef 92       	push	r14
 436:	ff 92       	push	r15
 438:	4b 01       	movw	r8, r22
 43a:	5c 01       	movw	r10, r24
 43c:	69 01       	movw	r12, r18
 43e:	7a 01       	movw	r14, r20
	unsigned char response;

	response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
 440:	ab 01       	movw	r20, r22
 442:	bc 01       	movw	r22, r24
 444:	80 e2       	ldi	r24, 0x20	; 32
 446:	15 df       	rcall	.-470    	; 0x272 <SD_sendCommand>
	if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
 448:	81 11       	cpse	r24, r1
 44a:	13 c0       	rjmp	.+38     	; 0x472 <SD_erase+0x4a>
		return response;

	response = SD_sendCommand(ERASE_BLOCK_END_ADDR, (startBlock + totalBlocks - 1)); //send end block address
 44c:	b5 01       	movw	r22, r10
 44e:	a4 01       	movw	r20, r8
 450:	4c 0d       	add	r20, r12
 452:	5d 1d       	adc	r21, r13
 454:	6e 1d       	adc	r22, r14
 456:	7f 1d       	adc	r23, r15
 458:	41 50       	subi	r20, 0x01	; 1
 45a:	51 09       	sbc	r21, r1
 45c:	61 09       	sbc	r22, r1
 45e:	71 09       	sbc	r23, r1
 460:	81 e2       	ldi	r24, 0x21	; 33
 462:	07 df       	rcall	.-498    	; 0x272 <SD_sendCommand>
	if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
 464:	81 11       	cpse	r24, r1
 466:	05 c0       	rjmp	.+10     	; 0x472 <SD_erase+0x4a>
		return response;

	response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	ba 01       	movw	r22, r20
 46e:	86 e2       	ldi	r24, 0x26	; 38
 470:	00 df       	rcall	.-512    	; 0x272 <SD_sendCommand>
	if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
		return response;

	return 0; //normal return
}
 472:	ff 90       	pop	r15
 474:	ef 90       	pop	r14
 476:	df 90       	pop	r13
 478:	cf 90       	pop	r12
 47a:	bf 90       	pop	r11
 47c:	af 90       	pop	r10
 47e:	9f 90       	pop	r9
 480:	8f 90       	pop	r8
 482:	08 95       	ret

00000484 <SD_readSingleBlock>:
//Arguments	: None
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	ab 01       	movw	r20, r22
 48a:	bc 01       	movw	r22, r24
	unsigned char response;
	unsigned int i, retry = 0;

	response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //CMD17 = read a Block command
 48c:	81 e1       	ldi	r24, 0x11	; 17
 48e:	f1 de       	rcall	.-542    	; 0x272 <SD_sendCommand>
 
	if(response != 0x00)
 490:	81 11       	cpse	r24, r1
		return response; //check for SD status: 0x00 - OK (No flags set)

	SPI_Chip_Select();
 492:	22 c0       	rjmp	.+68     	; 0x4d8 <SD_readSingleBlock+0x54>
 494:	8a d0       	rcall	.+276    	; 0x5aa <SPI_Chip_Select>

	retry = 0;
 496:	c0 e0       	ldi	r28, 0x00	; 0
 498:	d0 e0       	ldi	r29, 0x00	; 0
	while(SPI_receive() != 0b11111110) //wait for start single block token (0b11111110)
 49a:	09 c0       	rjmp	.+18     	; 0x4ae <SD_readSingleBlock+0x2a>
	{
		if(retry++ > 65000)
 49c:	ce 01       	movw	r24, r28
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	c9 3e       	cpi	r28, 0xE9	; 233
 4a2:	dd 4f       	sbci	r29, 0xFD	; 253
		{
			SPI_Chip_Deselect();
 4a4:	18 f0       	brcs	.+6      	; 0x4ac <SD_readSingleBlock+0x28>
 4a6:	85 d0       	rcall	.+266    	; 0x5b2 <SPI_Chip_Deselect>
			return 1;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
	SPI_Chip_Select();

	retry = 0;
	while(SPI_receive() != 0b11111110) //wait for start single block token (0b11111110)
	{
		if(retry++ > 65000)
 4aa:	16 c0       	rjmp	.+44     	; 0x4d8 <SD_readSingleBlock+0x54>
		return response; //check for SD status: 0x00 - OK (No flags set)

	SPI_Chip_Select();

	retry = 0;
	while(SPI_receive() != 0b11111110) //wait for start single block token (0b11111110)
 4ac:	ec 01       	movw	r28, r24
 4ae:	76 d0       	rcall	.+236    	; 0x59c <SPI_receive>
 4b0:	8e 3f       	cpi	r24, 0xFE	; 254
 4b2:	a1 f7       	brne	.-24     	; 0x49c <SD_readSingleBlock+0x18>
 4b4:	c0 e0       	ldi	r28, 0x00	; 0
 4b6:	d0 e0       	ldi	r29, 0x00	; 0
		} //return if time-out
	}
			
	for(i = 0; i < 512; i++) //read 512 bytes
	{
		buffer[i] = SPI_receive();
 4b8:	06 c0       	rjmp	.+12     	; 0x4c6 <SD_readSingleBlock+0x42>
 4ba:	70 d0       	rcall	.+224    	; 0x59c <SPI_receive>
 4bc:	fe 01       	movw	r30, r28
 4be:	e4 5b       	subi	r30, 0xB4	; 180
 4c0:	fd 4f       	sbci	r31, 0xFD	; 253
 4c2:	80 83       	st	Z, r24
			SPI_Chip_Deselect();
			return 1;
		} //return if time-out
	}
			
	for(i = 0; i < 512; i++) //read 512 bytes
 4c4:	21 96       	adiw	r28, 0x01	; 1
 4c6:	c1 15       	cp	r28, r1
	{
		buffer[i] = SPI_receive();
	}		

	SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	d8 07       	cpc	r29, r24
	SPI_receive();
 4cc:	b0 f3       	brcs	.-20     	; 0x4ba <SD_readSingleBlock+0x36>
 4ce:	66 d0       	rcall	.+204    	; 0x59c <SPI_receive>

	SPI_receive(); //extra 8 clock pulses
 4d0:	65 d0       	rcall	.+202    	; 0x59c <SPI_receive>
 4d2:	64 d0       	rcall	.+200    	; 0x59c <SPI_receive>
	SPI_Chip_Deselect();
 4d4:	6e d0       	rcall	.+220    	; 0x5b2 <SPI_Chip_Deselect>
 4d6:	80 e0       	ldi	r24, 0x00	; 0

	return 0;
 4d8:	df 91       	pop	r29
}
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <SD_writeSingleBlock>:
 4de:	cf 93       	push	r28
//Arguments	: None
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
 4e0:	df 93       	push	r29
 4e2:	ab 01       	movw	r20, r22
 4e4:	bc 01       	movw	r22, r24
	unsigned char response;
	unsigned int i, retry = 0;

	response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
 4e6:	88 e1       	ldi	r24, 0x18	; 24
 4e8:	c4 de       	rcall	.-632    	; 0x272 <SD_sendCommand>
  
	if(response != 0x00)
 4ea:	81 11       	cpse	r24, r1
		return response; //check for SD status: 0x00 - OK (No flags set)

	SPI_Chip_Select();
 4ec:	3e c0       	rjmp	.+124    	; 0x56a <SD_writeSingleBlock+0x8c>

	SPI_transmit(0b11111110); //Send start single block token (0b11111110)
 4ee:	5d d0       	rcall	.+186    	; 0x5aa <SPI_Chip_Select>
 4f0:	8e ef       	ldi	r24, 0xFE	; 254
 4f2:	4e d0       	rcall	.+156    	; 0x590 <SPI_transmit>
	for(i = 0; i < 512; i++) //send 512 bytes data
 4f4:	c0 e0       	ldi	r28, 0x00	; 0
 4f6:	d0 e0       	ldi	r29, 0x00	; 0
 4f8:	06 c0       	rjmp	.+12     	; 0x506 <SD_writeSingleBlock+0x28>
	{
		SPI_transmit(buffer[i]);
 4fa:	fe 01       	movw	r30, r28
 4fc:	e4 5b       	subi	r30, 0xB4	; 180
 4fe:	fd 4f       	sbci	r31, 0xFD	; 253
 500:	80 81       	ld	r24, Z
 502:	46 d0       	rcall	.+140    	; 0x590 <SPI_transmit>
		return response; //check for SD status: 0x00 - OK (No flags set)

	SPI_Chip_Select();

	SPI_transmit(0b11111110); //Send start single block token (0b11111110)
	for(i = 0; i < 512; i++) //send 512 bytes data
 504:	21 96       	adiw	r28, 0x01	; 1
 506:	c1 15       	cp	r28, r1
 508:	22 e0       	ldi	r18, 0x02	; 2
 50a:	d2 07       	cpc	r29, r18
	{
		SPI_transmit(buffer[i]);
	}
	SPI_transmit(0xff); //transmit dummy CRC (16-bit), CRC is ignored here
 50c:	b0 f3       	brcs	.-20     	; 0x4fa <SD_writeSingleBlock+0x1c>
 50e:	8f ef       	ldi	r24, 0xFF	; 255
	SPI_transmit(0xff);
 510:	3f d0       	rcall	.+126    	; 0x590 <SPI_transmit>
 512:	8f ef       	ldi	r24, 0xFF	; 255

	response = SPI_receive();
 514:	3d d0       	rcall	.+122    	; 0x590 <SPI_transmit>
 516:	42 d0       	rcall	.+132    	; 0x59c <SPI_receive>
 518:	c8 2f       	mov	r28, r24

	if( (response & 0b00011111) != 0b00000101) //response= 0bXXX0AAA1 ; AAA='010' - data accepted
 51a:	8f 71       	andi	r24, 0x1F	; 31
 51c:	85 30       	cpi	r24, 0x05	; 5
 51e:	59 f0       	breq	.+22     	; 0x536 <SD_writeSingleBlock+0x58>
	{                              //AAA='101'-data rejected due to CRC error
		SPI_Chip_Deselect();       //AAA='110'-data rejected due to write error
 520:	48 d0       	rcall	.+144    	; 0x5b2 <SPI_Chip_Deselect>
		return response;
 522:	8c 2f       	mov	r24, r28
 524:	22 c0       	rjmp	.+68     	; 0x56a <SD_writeSingleBlock+0x8c>
	}

	while(SPI_receive() == 0) //wait for SD card to complete writing and get idle
	{
		if(retry++ > 65000)
 526:	ce 01       	movw	r24, r28
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	c9 3e       	cpi	r28, 0xE9	; 233
 52c:	dd 4f       	sbci	r29, 0xFD	; 253
		{
			SPI_Chip_Deselect();
 52e:	30 f0       	brcs	.+12     	; 0x53c <SD_writeSingleBlock+0x5e>
 530:	40 d0       	rcall	.+128    	; 0x5b2 <SPI_Chip_Deselect>
			return 1;
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	1a c0       	rjmp	.+52     	; 0x56a <SD_writeSingleBlock+0x8c>
 536:	c0 e0       	ldi	r28, 0x00	; 0
		return response;
	}

	while(SPI_receive() == 0) //wait for SD card to complete writing and get idle
	{
		if(retry++ > 65000)
 538:	d0 e0       	ldi	r29, 0x00	; 0
	{                              //AAA='101'-data rejected due to CRC error
		SPI_Chip_Deselect();       //AAA='110'-data rejected due to write error
		return response;
	}

	while(SPI_receive() == 0) //wait for SD card to complete writing and get idle
 53a:	01 c0       	rjmp	.+2      	; 0x53e <SD_writeSingleBlock+0x60>
 53c:	ec 01       	movw	r28, r24
 53e:	2e d0       	rcall	.+92     	; 0x59c <SPI_receive>
 540:	88 23       	and	r24, r24
			SPI_Chip_Deselect();
			return 1;
		}
	}

	SPI_Chip_Deselect();
 542:	89 f3       	breq	.-30     	; 0x526 <SD_writeSingleBlock+0x48>
	SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
 544:	36 d0       	rcall	.+108    	; 0x5b2 <SPI_Chip_Deselect>
 546:	8f ef       	ldi	r24, 0xFF	; 255
	SPI_Chip_Select();    //re-asserting the CS line to verify if card is still busy
 548:	23 d0       	rcall	.+70     	; 0x590 <SPI_transmit>
 54a:	2f d0       	rcall	.+94     	; 0x5aa <SPI_Chip_Select>

	while(SPI_receive() == 0) //wait for SD card to complete writing and get idle
	{
		if(retry++ > 65000)
 54c:	09 c0       	rjmp	.+18     	; 0x560 <SD_writeSingleBlock+0x82>
 54e:	ce 01       	movw	r24, r28
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	c9 3e       	cpi	r28, 0xE9	; 233
 554:	dd 4f       	sbci	r29, 0xFD	; 253
		{
			SPI_Chip_Deselect();
 556:	18 f0       	brcs	.+6      	; 0x55e <SD_writeSingleBlock+0x80>
 558:	2c d0       	rcall	.+88     	; 0x5b2 <SPI_Chip_Deselect>
			return 1;
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	06 c0       	rjmp	.+12     	; 0x56a <SD_writeSingleBlock+0x8c>
	SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
	SPI_Chip_Select();    //re-asserting the CS line to verify if card is still busy

	while(SPI_receive() == 0) //wait for SD card to complete writing and get idle
	{
		if(retry++ > 65000)
 55e:	ec 01       	movw	r28, r24

	SPI_Chip_Deselect();
	SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
	SPI_Chip_Select();    //re-asserting the CS line to verify if card is still busy

	while(SPI_receive() == 0) //wait for SD card to complete writing and get idle
 560:	1d d0       	rcall	.+58     	; 0x59c <SPI_receive>
 562:	88 23       	and	r24, r24
 564:	a1 f3       	breq	.-24     	; 0x54e <SD_writeSingleBlock+0x70>
 566:	25 d0       	rcall	.+74     	; 0x5b2 <SPI_Chip_Deselect>
			SPI_Chip_Deselect();
			return 1;
		}
	}			
	   
	SPI_Chip_Deselect();
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	df 91       	pop	r29
	return 0;
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret

00000570 <SPI_init>:
#include "SPI_Driver.h"

//SPI initialize for SD card
void SPI_init(void)
{
	SPI_DDR |= 1 << SS_BIT;
 570:	84 b1       	in	r24, 0x04	; 4
 572:	81 60       	ori	r24, 0x01	; 1
 574:	84 b9       	out	0x04, r24	; 4
	SPI_DDR |= 1 << MOSI_BIT;
 576:	84 b1       	in	r24, 0x04	; 4
 578:	84 60       	ori	r24, 0x04	; 4
 57a:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~(1 << MISO_BIT);
 57c:	84 b1       	in	r24, 0x04	; 4
 57e:	87 7f       	andi	r24, 0xF7	; 247
 580:	84 b9       	out	0x04, r24	; 4
	SPI_DDR |= 1 << SCK_BIT;
 582:	84 b1       	in	r24, 0x04	; 4
 584:	82 60       	ori	r24, 0x02	; 2
 586:	84 b9       	out	0x04, r24	; 4
	//Setup SPI: Enable, Master mode, MSB first, SCK phase low, SCK idle low, f = fosc/64 = 16 MHz/64 = 250 kHz
	SPCR = 0b01010010;
 588:	82 e5       	ldi	r24, 0x52	; 82
 58a:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
 58c:	1d bc       	out	0x2d, r1	; 45
 58e:	08 95       	ret

00000590 <SPI_transmit>:
void SPI_transmit(unsigned char data)
{
unsigned char dummy;
	
	// Start transmission
	SPDR = data;
 590:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)))
 592:	0d b4       	in	r0, 0x2d	; 45
 594:	07 fe       	sbrs	r0, 7
 596:	fd cf       	rjmp	.-6      	; 0x592 <SPI_transmit+0x2>
	{}
    // Clear flag 		
	dummy = SPDR;
 598:	8e b5       	in	r24, 0x2e	; 46
 59a:	08 95       	ret

0000059c <SPI_receive>:
unsigned char SPI_receive()
{
	unsigned char data;
	// Wait for reception complete

	SPDR = 0xff;
 59c:	8f ef       	ldi	r24, 0xFF	; 255
 59e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 5a0:	0d b4       	in	r0, 0x2d	; 45
 5a2:	07 fe       	sbrs	r0, 7
 5a4:	fd cf       	rjmp	.-6      	; 0x5a0 <SPI_receive+0x4>
	data = SPDR;
 5a6:	8e b5       	in	r24, 0x2e	; 46

	// Return data register
	return data;
}
 5a8:	08 95       	ret

000005aa <SPI_Chip_Select>:

// CS active (=low)
void SPI_Chip_Select()
{
	SPI_PORT &= ~(1 << SS_BIT);
 5aa:	85 b1       	in	r24, 0x05	; 5
 5ac:	8e 7f       	andi	r24, 0xFE	; 254
 5ae:	85 b9       	out	0x05, r24	; 5
 5b0:	08 95       	ret

000005b2 <SPI_Chip_Deselect>:
}

// CS inactive (=high)
void SPI_Chip_Deselect()
{
	SPI_PORT |= (1 << SS_BIT);
 5b2:	85 b1       	in	r24, 0x05	; 5
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	85 b9       	out	0x05, r24	; 5
 5b8:	08 95       	ret

000005ba <InitUART>:
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady()
{
   return UCSR0A & (1<<7);
}
 5ba:	cf 92       	push	r12
 5bc:	df 92       	push	r13
 5be:	ef 92       	push	r14
 5c0:	ff 92       	push	r15
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	8b 01       	movw	r16, r22
 5c8:	9c 01       	movw	r18, r24
 5ca:	0c 52       	subi	r16, 0x2C	; 44
 5cc:	11 40       	sbci	r17, 0x01	; 1
 5ce:	21 09       	sbc	r18, r1
 5d0:	31 09       	sbc	r19, r1
 5d2:	05 3d       	cpi	r16, 0xD5	; 213
 5d4:	10 4c       	sbci	r17, 0xC0	; 192
 5d6:	21 40       	sbci	r18, 0x01	; 1
 5d8:	31 05       	cpc	r19, r1
 5da:	08 f0       	brcs	.+2      	; 0x5de <InitUART+0x24>
 5dc:	41 c0       	rjmp	.+130    	; 0x660 <InitUART+0xa6>
 5de:	45 30       	cpi	r20, 0x05	; 5
 5e0:	08 f4       	brcc	.+2      	; 0x5e4 <InitUART+0x2a>
 5e2:	3e c0       	rjmp	.+124    	; 0x660 <InitUART+0xa6>
 5e4:	49 30       	cpi	r20, 0x09	; 9
 5e6:	e0 f5       	brcc	.+120    	; 0x660 <InitUART+0xa6>
 5e8:	20 e2       	ldi	r18, 0x20	; 32
 5ea:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 5ee:	28 e1       	ldi	r18, 0x18	; 24
 5f0:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 5f4:	45 50       	subi	r20, 0x05	; 5
 5f6:	44 0f       	add	r20, r20
 5f8:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 5fc:	6b 01       	movw	r12, r22
 5fe:	7c 01       	movw	r14, r24
 600:	20 e8       	ldi	r18, 0x80	; 128
 602:	c2 0e       	add	r12, r18
 604:	24 e8       	ldi	r18, 0x84	; 132
 606:	d2 1e       	adc	r13, r18
 608:	2e e1       	ldi	r18, 0x1E	; 30
 60a:	e2 1e       	adc	r14, r18
 60c:	f1 1c       	adc	r15, r1
 60e:	cc 0c       	add	r12, r12
 610:	dd 1c       	adc	r13, r13
 612:	ee 1c       	adc	r14, r14
 614:	ff 1c       	adc	r15, r15
 616:	cc 0c       	add	r12, r12
 618:	dd 1c       	adc	r13, r13
 61a:	ee 1c       	adc	r14, r14
 61c:	ff 1c       	adc	r15, r15
 61e:	cc 0c       	add	r12, r12
 620:	dd 1c       	adc	r13, r13
 622:	ee 1c       	adc	r14, r14
 624:	ff 1c       	adc	r15, r15
 626:	dc 01       	movw	r26, r24
 628:	cb 01       	movw	r24, r22
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	aa 1f       	adc	r26, r26
 630:	bb 1f       	adc	r27, r27
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	aa 1f       	adc	r26, r26
 638:	bb 1f       	adc	r27, r27
 63a:	9c 01       	movw	r18, r24
 63c:	ad 01       	movw	r20, r26
 63e:	22 0f       	add	r18, r18
 640:	33 1f       	adc	r19, r19
 642:	44 1f       	adc	r20, r20
 644:	55 1f       	adc	r21, r21
 646:	22 0f       	add	r18, r18
 648:	33 1f       	adc	r19, r19
 64a:	44 1f       	adc	r20, r20
 64c:	55 1f       	adc	r21, r21
 64e:	c7 01       	movw	r24, r14
 650:	b6 01       	movw	r22, r12
 652:	5d d0       	rcall	.+186    	; 0x70e <__udivmodsi4>
 654:	21 50       	subi	r18, 0x01	; 1
 656:	31 09       	sbc	r19, r1
 658:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 65c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	ff 90       	pop	r15
 666:	ef 90       	pop	r14
 668:	df 90       	pop	r13
 66a:	cf 90       	pop	r12
 66c:	08 95       	ret

0000066e <ReadChar>:
Then this character is returned.
*************************************************************************/
char ReadChar()
{
  // Wait for new character received
  while ( (UCSR0A & (1<<7)) == 0 )
 66e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 672:	88 23       	and	r24, r24
 674:	e4 f7       	brge	.-8      	; 0x66e <ReadChar>
  {}                        
  // Then return it
  return UDR0;
 676:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
 67a:	08 95       	ret

0000067c <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR0A & (1<<5)) == 0 )
 67c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 680:	95 ff       	sbrs	r25, 5
 682:	fc cf       	rjmp	.-8      	; 0x67c <SendChar>
  {}
  // Then send the character
  UDR0 = Tegn;
 684:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 688:	08 95       	ret

0000068a <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	ec 01       	movw	r28, r24
  // Repeat until zero-termination
  while (*Streng != 0)
 690:	02 c0       	rjmp	.+4      	; 0x696 <SendString+0xc>
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
 692:	f4 df       	rcall	.-24     	; 0x67c <SendChar>
    // Advance the pointer one step
    Streng++;
 694:	21 96       	adiw	r28, 0x01	; 1
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 696:	88 81       	ld	r24, Y
 698:	81 11       	cpse	r24, r1
 69a:	fb cf       	rjmp	.-10     	; 0x692 <SendString+0x8>
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	08 95       	ret

000006a2 <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(int Tal)
{
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	27 97       	sbiw	r28, 0x07	; 7
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	f8 94       	cli
 6b0:	de bf       	out	0x3e, r29	; 62
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 6b6:	4a e0       	ldi	r20, 0x0A	; 10
 6b8:	be 01       	movw	r22, r28
 6ba:	6f 5f       	subi	r22, 0xFF	; 255
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	49 d0       	rcall	.+146    	; 0x752 <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(array);
 6c0:	ce 01       	movw	r24, r28
 6c2:	01 96       	adiw	r24, 0x01	; 1
 6c4:	e2 df       	rcall	.-60     	; 0x68a <SendString>
}
 6c6:	27 96       	adiw	r28, 0x07	; 7
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	f8 94       	cli
 6cc:	de bf       	out	0x3e, r29	; 62
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	cd bf       	out	0x3d, r28	; 61
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	08 95       	ret

000006d8 <SendLong>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The long to be converted and sent. 
*************************************************************************/
void SendLong(long Tal)
{
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	cd b7       	in	r28, 0x3d	; 61
 6de:	de b7       	in	r29, 0x3e	; 62
 6e0:	2b 97       	sbiw	r28, 0x0b	; 11
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	f8 94       	cli
 6e6:	de bf       	out	0x3e, r29	; 62
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 6ec:	2a e0       	ldi	r18, 0x0A	; 10
 6ee:	ae 01       	movw	r20, r28
 6f0:	4f 5f       	subi	r20, 0xFF	; 255
 6f2:	5f 4f       	sbci	r21, 0xFF	; 255
 6f4:	38 d0       	rcall	.+112    	; 0x766 <__ltoa_ncheck>
char array[11];
  // Convert the integer to an ASCII string (array), radix = 10 
  ltoa(Tal, array, 10);
  // - then send the string
  SendString(array);
 6f6:	ce 01       	movw	r24, r28
 6f8:	01 96       	adiw	r24, 0x01	; 1
 6fa:	c7 df       	rcall	.-114    	; 0x68a <SendString>
}
 6fc:	2b 96       	adiw	r28, 0x0b	; 11
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	f8 94       	cli
 702:	de bf       	out	0x3e, r29	; 62
 704:	0f be       	out	0x3f, r0	; 63
 706:	cd bf       	out	0x3d, r28	; 61
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	08 95       	ret

0000070e <__udivmodsi4>:
 70e:	a1 e2       	ldi	r26, 0x21	; 33
 710:	1a 2e       	mov	r1, r26
 712:	aa 1b       	sub	r26, r26
 714:	bb 1b       	sub	r27, r27
 716:	fd 01       	movw	r30, r26
 718:	0d c0       	rjmp	.+26     	; 0x734 <__udivmodsi4_ep>

0000071a <__udivmodsi4_loop>:
 71a:	aa 1f       	adc	r26, r26
 71c:	bb 1f       	adc	r27, r27
 71e:	ee 1f       	adc	r30, r30
 720:	ff 1f       	adc	r31, r31
 722:	a2 17       	cp	r26, r18
 724:	b3 07       	cpc	r27, r19
 726:	e4 07       	cpc	r30, r20
 728:	f5 07       	cpc	r31, r21
 72a:	20 f0       	brcs	.+8      	; 0x734 <__udivmodsi4_ep>
 72c:	a2 1b       	sub	r26, r18
 72e:	b3 0b       	sbc	r27, r19
 730:	e4 0b       	sbc	r30, r20
 732:	f5 0b       	sbc	r31, r21

00000734 <__udivmodsi4_ep>:
 734:	66 1f       	adc	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	88 1f       	adc	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	1a 94       	dec	r1
 73e:	69 f7       	brne	.-38     	; 0x71a <__udivmodsi4_loop>
 740:	60 95       	com	r22
 742:	70 95       	com	r23
 744:	80 95       	com	r24
 746:	90 95       	com	r25
 748:	9b 01       	movw	r18, r22
 74a:	ac 01       	movw	r20, r24
 74c:	bd 01       	movw	r22, r26
 74e:	cf 01       	movw	r24, r30
 750:	08 95       	ret

00000752 <__itoa_ncheck>:
 752:	bb 27       	eor	r27, r27
 754:	4a 30       	cpi	r20, 0x0A	; 10
 756:	31 f4       	brne	.+12     	; 0x764 <__itoa_ncheck+0x12>
 758:	99 23       	and	r25, r25
 75a:	22 f4       	brpl	.+8      	; 0x764 <__itoa_ncheck+0x12>
 75c:	bd e2       	ldi	r27, 0x2D	; 45
 75e:	90 95       	com	r25
 760:	81 95       	neg	r24
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	30 c0       	rjmp	.+96     	; 0x7c6 <__utoa_common>

00000766 <__ltoa_ncheck>:
 766:	bb 27       	eor	r27, r27
 768:	2a 30       	cpi	r18, 0x0A	; 10
 76a:	51 f4       	brne	.+20     	; 0x780 <__ltoa_ncheck+0x1a>
 76c:	99 23       	and	r25, r25
 76e:	42 f4       	brpl	.+16     	; 0x780 <__ltoa_ncheck+0x1a>
 770:	bd e2       	ldi	r27, 0x2D	; 45
 772:	90 95       	com	r25
 774:	80 95       	com	r24
 776:	70 95       	com	r23
 778:	61 95       	neg	r22
 77a:	7f 4f       	sbci	r23, 0xFF	; 255
 77c:	8f 4f       	sbci	r24, 0xFF	; 255
 77e:	9f 4f       	sbci	r25, 0xFF	; 255
 780:	01 c0       	rjmp	.+2      	; 0x784 <__ultoa_common>

00000782 <__ultoa_ncheck>:
 782:	bb 27       	eor	r27, r27

00000784 <__ultoa_common>:
 784:	fa 01       	movw	r30, r20
 786:	a6 2f       	mov	r26, r22
 788:	62 17       	cp	r22, r18
 78a:	71 05       	cpc	r23, r1
 78c:	81 05       	cpc	r24, r1
 78e:	91 05       	cpc	r25, r1
 790:	33 0b       	sbc	r19, r19
 792:	30 fb       	bst	r19, 0
 794:	66 f0       	brts	.+24     	; 0x7ae <__ultoa_common+0x2a>
 796:	aa 27       	eor	r26, r26
 798:	66 0f       	add	r22, r22
 79a:	77 1f       	adc	r23, r23
 79c:	88 1f       	adc	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	aa 1f       	adc	r26, r26
 7a2:	a2 17       	cp	r26, r18
 7a4:	10 f0       	brcs	.+4      	; 0x7aa <__ultoa_common+0x26>
 7a6:	a2 1b       	sub	r26, r18
 7a8:	63 95       	inc	r22
 7aa:	38 50       	subi	r19, 0x08	; 8
 7ac:	a9 f7       	brne	.-22     	; 0x798 <__ultoa_common+0x14>
 7ae:	a0 5d       	subi	r26, 0xD0	; 208
 7b0:	aa 33       	cpi	r26, 0x3A	; 58
 7b2:	08 f0       	brcs	.+2      	; 0x7b6 <__ultoa_common+0x32>
 7b4:	a9 5d       	subi	r26, 0xD9	; 217
 7b6:	a1 93       	st	Z+, r26
 7b8:	36 f7       	brtc	.-52     	; 0x786 <__ultoa_common+0x2>
 7ba:	b1 11       	cpse	r27, r1
 7bc:	b1 93       	st	Z+, r27
 7be:	10 82       	st	Z, r1
 7c0:	ca 01       	movw	r24, r20
 7c2:	19 c0       	rjmp	.+50     	; 0x7f6 <strrev>

000007c4 <__utoa_ncheck>:
 7c4:	bb 27       	eor	r27, r27

000007c6 <__utoa_common>:
 7c6:	fb 01       	movw	r30, r22
 7c8:	55 27       	eor	r21, r21
 7ca:	aa 27       	eor	r26, r26
 7cc:	88 0f       	add	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	aa 1f       	adc	r26, r26
 7d2:	a4 17       	cp	r26, r20
 7d4:	10 f0       	brcs	.+4      	; 0x7da <__utoa_common+0x14>
 7d6:	a4 1b       	sub	r26, r20
 7d8:	83 95       	inc	r24
 7da:	50 51       	subi	r21, 0x10	; 16
 7dc:	b9 f7       	brne	.-18     	; 0x7cc <__utoa_common+0x6>
 7de:	a0 5d       	subi	r26, 0xD0	; 208
 7e0:	aa 33       	cpi	r26, 0x3A	; 58
 7e2:	08 f0       	brcs	.+2      	; 0x7e6 <__utoa_common+0x20>
 7e4:	a9 5d       	subi	r26, 0xD9	; 217
 7e6:	a1 93       	st	Z+, r26
 7e8:	00 97       	sbiw	r24, 0x00	; 0
 7ea:	79 f7       	brne	.-34     	; 0x7ca <__utoa_common+0x4>
 7ec:	b1 11       	cpse	r27, r1
 7ee:	b1 93       	st	Z+, r27
 7f0:	11 92       	st	Z+, r1
 7f2:	cb 01       	movw	r24, r22
 7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <strrev>

000007f6 <strrev>:
 7f6:	dc 01       	movw	r26, r24
 7f8:	fc 01       	movw	r30, r24
 7fa:	67 2f       	mov	r22, r23
 7fc:	71 91       	ld	r23, Z+
 7fe:	77 23       	and	r23, r23
 800:	e1 f7       	brne	.-8      	; 0x7fa <strrev+0x4>
 802:	32 97       	sbiw	r30, 0x02	; 2
 804:	04 c0       	rjmp	.+8      	; 0x80e <strrev+0x18>
 806:	7c 91       	ld	r23, X
 808:	6d 93       	st	X+, r22
 80a:	70 83       	st	Z, r23
 80c:	62 91       	ld	r22, -Z
 80e:	ae 17       	cp	r26, r30
 810:	bf 07       	cpc	r27, r31
 812:	c8 f3       	brcs	.-14     	; 0x806 <strrev+0x10>
 814:	08 95       	ret

00000816 <_exit>:
 816:	f8 94       	cli

00000818 <__stop_program>:
 818:	ff cf       	rjmp	.-2      	; 0x818 <__stop_program>
