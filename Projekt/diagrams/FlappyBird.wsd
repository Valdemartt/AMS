@startuml
class TFTDriver
{
    +TFTDriver()
    +TFTDriver(height: int, width: int)
    +~TFTDriver()
    +DisplayInit(): void
    +Reset(): void
    +DisplayOff(): void
    +DisplayOn(): void
    +FillRectangle(StartX: int, int StartY: int, Width: unsigned int,
	+Height: unsigned int, color: unsigned int): void
    +DrawGame(pillars: PipePair*, numPillars: int, flappy: FlappyObject*): void
    +DrawBackground(): void
    +DisplayInversionOn(): void
    +DisplayInversionOff(): void
    +GetWidth(): int
    +GetHeight(): int
    +DrawFlappy(flappy: FlappyObject*)
    +EraseObjects(pipes: PipePair*, numPairs: int, flappy: FlappyObject*, color: unsigned int): void
    +DrawText(data: const unsigned char*, dataLength: long int, width: int, height: int, xCenter: int, yCenter: int, backgroundColor: unsigned int, textColor: unsigned int): void
    -_height: int
    -_width: int
    -SleepOut(): void
    -MemoryAccessControl(parameter: unsigned char): void
    -InterfacePixelFormat(parameter: unsigned char): void
    -WritePixel(encodedColor: int): void
    -SetColumnAddress(Start: unsigned int, End: unsigned int): void
    -SetPageAddress(Start: unsigned int, End: unsigned int): void
    -MemoryWrite(): void
    -WriteCommand(command: unsigned int): void
    -WriteData(data: unsigned int): void
}

class TouchDriver
{
    +TouchDriver()
    +TouchDriver(x_offset: int, y_offset: int, conversion_resolution: int, x_pixels: int, y_pixels: int)
    +InitTouch(): void
    +getX(): int
    +getY(): int
    +Read(): void
    +SetTimer1_EnableInterrupt(): void
    -WriteData(data: unsigned char): void
    -ReadData(): int16_t
    -ScreenTouched(): bool
    -ClockPulse(): void
    -ClearClock(): void
    -position: Position
    -_xOffset: int
    -_yOffset: int
    -_timer0_duration: int
    -_conversionResolution: int
    -_xPixels: int
    -_yPixels: int
    -_xResPerPixel: int
    -_yResPerPixel: int
}

class Position
{
    +Position()
    +Position(x: int, y: int)
    +setX(x: int): void
    +setY(y: int): void
    +getX(): int
    +getY(): int
    -x_value: int
    -y_value: int
}

class MAIN
{
    ISR(INT4_vect)
    ISR(TIMER3_COMPA_vect)
    ISRT(TIMER1_COMPA_vect)
}

class CollisionDetection
{
    +CheckCollision(flappy: FlappyObject*, pipes: PipePair*): static bool
    +CheckEarthCollision(flappy: FlappyObject*, earth: int): static bool
    +CheckButtonClicked(button: UIObject*, clickPosition: Position*): static bool
}

class CheckScore
{
    +CheckIncrementScore(flappy: FlappyObject*, pipes: PipePair*): static bool
}

class PhysicsEngine
{
    +PhysicsEngine()
    +Update(elapsedTime: int, flappy: FlappyObject*, keyPressed: bool): void
    -FlappyPosition: int
    -Velocity: int
    -Acceleration: int
    -Gratvity = 10: int
}

class InterruptSetup
{
    +InitFrameTimer(): static void
}

class GameController
{
    +GameController()
    +GameController(tftDriver: TFTDriver*, touchDriver: TouchDriver*, engine: PhysicsEngine*, seed: long, pipeWidth: int, pipeGap: int)
    +StartGame(): void
    +StopGame(): void
    +GameOver(): void
    +IsPlaying(): bool
    +NextFrame(screenPressed: bool): void
    +Pause(): void
    +DetectCollision(): bool
    -CheckIncrementScore(): bool
    -GenerateRandomNumber(min: unsigned int, max: unsigned int): unsigned int
    -UpdatePipes(): void
    -UpdateFlappy(screenPressed: bool): void
    -_pipeGap: int
    -_isPlaying: bool
    -_rngState: unsigned long
    -_lastPipeOffset: unsigned int
    -_pipeWidth: int
    -_speed: int
    -_score: int
    -_highsacore: int
    -_pipeDistance: int
    -_numPipePairs: int
    -_elapsedTimeSinceClick: int
    -_earthHight: int
}

class Color
{
    +Color()
    +Color(red: char, green: char, blue: char, name: char*)
    +Color(red: char, green: char, blue: char)
    +getRed(): char
    +getBlue(): char
    +getGreen(): char
    +getEncodedColor(): unsigned int
    -_red: char
    -_green: char
    -_blue: char
    -_name: char*
    -_encodedColor: unsigned int
}

class UIObject
{
    +(GameController::* gameControllerCallback): typedef void

    +UIObject()
    +UIObject(startX: int, startY: int, height: int, width: int, color: Color*)
    +GetStartX(): int
    +GetStartY(): int
    +GetHeight(): int
    +GetWidth(): int
    +SetStartX(startX: int): void
    +SetStartY(startY: int): void
    +SetHeight(height: int): void
    +SetWidth(width: int): void
    +SetColor(color: Color*): void
    +GetColor(): unsigned int
    +SetCallback(callback: gameControllerCallback): void
    +Callback(game: GameController*)
    -flappy*: int
    -startX: int
    -startY: int
    -height: int
    -width: int
    -color: unsigned int
    -_callback :gameControllerCallback
}

class FlappyObject
{
    +FlappyObject()
    +FlappyObject(startX: int, startY: int)
    +getFlappy(index: int): int*
    +getFlappyHeight(): int
    +getFlappyWidth(): int
    +getStartX(): int
    +getStartY(): int
    +SetStartY(): int
    -_startX: int
    -_startY: int
    -_flappy[]: int
}

class PipePair
{
    +PipePair()
    +PipePair(upper: UIObject, lower: UIObject)
    +GetUpper(): UIObject*
    +GetLower(): UIObject*
    +GetIsPassed(): bool
    +SetIsPassed(isPassed: bool): void
    -_upper: UIObject
    -_lower: UIObject
    -_passed: bool
}
@enduml