@startuml
skinparam sequence {
    ArrowColor Black
    ActorBorderColor Black
    LifeLineBorderColor Black
    ArrowMessageAlignment center
    ParticipantBorderColor Black
    ParticipantBackgroundColor White
    BoxBorderColor Black
}

skinparam Collections {
    BorderColor Black
    BackgroundColor White
}
skinparam control{
    BorderColor Black
    BackgroundColor White
}
skinparam boundary {
    BorderColor Black
    BackgroundColor White
}

control main
participant GameController
boundary TFTDriver
main -> GameController : NextFrame(bool screenPressed)
GameController -> GameController : DetectCollision()
alt Collision detected
    GameController -> GameController : GameOver()
    main <-- GameController: Return 
else
    GameController -> TFTDriver : EraseObjects(PipePair * pipes,\n int numPipePairs, \n FlappyObject * flappy,\n unsigned int BackgroundColor, \n int speed)
    GameController -> GameController : UpdatePipes()
    GameController -> GameController : UpdateFlappy(screenPressed);
    GameController -> GameController : CheckIncrementScore()
    opt Increment score
    GameController -> GameController : score++
    GameController -> TFTDriver : UpdateScore(score)
    end
    GameController -> TFTDriver : DrawGame(PipePair * pipes, \n int numPipePairs,\n FlappyObject * flappy,\n int speed)
    main <-- GameController : Return
end
@enduml