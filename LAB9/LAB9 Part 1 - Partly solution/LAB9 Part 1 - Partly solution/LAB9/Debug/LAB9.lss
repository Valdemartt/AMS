
LAB9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800200  000006d8  0000076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020a  00800248  00800248  000007b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a87  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f52  00000000  00000000  0000239b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000940  00000000  00000000  000032ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00003c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000700  00000000  00000000  00003e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066d  00000000  00000000  00004520  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004b8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ed       	ldi	r30, 0xD8	; 216
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 34       	cpi	r26, 0x48	; 72
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a8 e4       	ldi	r26, 0x48	; 72
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 35       	cpi	r26, 0x52	; 82
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	d9 c2       	rjmp	.+1458   	; 0x6d4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#define Block_2 1234567

int main(void)
{
	//Setup SD/SPI drivers
	SD_init();
 124:	08 d1       	rcall	.+528    	; 0x336 <SD_init>
	InitUART(9600, 8);
 126:	48 e0       	ldi	r20, 0x08	; 8
 128:	60 e8       	ldi	r22, 0x80	; 128
 12a:	75 e2       	ldi	r23, 0x25	; 37
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	a3 d1       	rcall	.+838    	; 0x478 <InitUART>
	
	while(1)
	{
        SD_readSingleBlock(Block_1);
 132:	6e ec       	ldi	r22, 0xCE	; 206
 134:	72 e0       	ldi	r23, 0x02	; 2
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	77 d1       	rcall	.+750    	; 0x42a <SD_readSingleBlock>
		SendString("\nBlock ");
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	92 e0       	ldi	r25, 0x02	; 2
 140:	03 d2       	rcall	.+1030   	; 0x548 <SendString>
 142:	6e ec       	ldi	r22, 0xCE	; 206
		SendLong(Block_1);
 144:	72 e0       	ldi	r23, 0x02	; 2
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	25 d2       	rcall	.+1098   	; 0x596 <SendLong>
		SendString(" =\n");
 14c:	88 e0       	ldi	r24, 0x08	; 8
 14e:	92 e0       	ldi	r25, 0x02	; 2
 150:	fb d1       	rcall	.+1014   	; 0x548 <SendString>
 152:	c0 e0       	ldi	r28, 0x00	; 0
		for (int i = 0; i<512; i++)
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	09 c0       	rjmp	.+18     	; 0x16a <main+0x46>
        {
	        SendInteger(buffer[i]);
 158:	fe 01       	movw	r30, r28
 15a:	e4 5b       	subi	r30, 0xB4	; 180
 15c:	fd 4f       	sbci	r31, 0xFD	; 253
 15e:	80 81       	ld	r24, Z
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	fe d1       	rcall	.+1020   	; 0x560 <SendInteger>
			SendChar(' ');
 164:	80 e2       	ldi	r24, 0x20	; 32
 166:	e9 d1       	rcall	.+978    	; 0x53a <SendChar>
 168:	21 96       	adiw	r28, 0x01	; 1
	{
        SD_readSingleBlock(Block_1);
		SendString("\nBlock ");
		SendLong(Block_1);
		SendString(" =\n");
		for (int i = 0; i<512; i++)
 16a:	c1 15       	cp	r28, r1
 16c:	22 e0       	ldi	r18, 0x02	; 2
 16e:	d2 07       	cpc	r29, r18
 170:	9c f3       	brlt	.-26     	; 0x158 <main+0x34>
        {
	        SendInteger(buffer[i]);
			SendChar(' ');
        }
		
        SD_readSingleBlock(Block_2);
 172:	67 e8       	ldi	r22, 0x87	; 135
 174:	76 ed       	ldi	r23, 0xD6	; 214
 176:	82 e1       	ldi	r24, 0x12	; 18
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	57 d1       	rcall	.+686    	; 0x42a <SD_readSingleBlock>
		SendString("\nBlock ");
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	92 e0       	ldi	r25, 0x02	; 2
 180:	e3 d1       	rcall	.+966    	; 0x548 <SendString>
		SendLong(Block_2);
 182:	67 e8       	ldi	r22, 0x87	; 135
 184:	76 ed       	ldi	r23, 0xD6	; 214
 186:	82 e1       	ldi	r24, 0x12	; 18
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	05 d2       	rcall	.+1034   	; 0x596 <SendLong>
 18c:	88 e0       	ldi	r24, 0x08	; 8
		SendString(" =\n");
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	db d1       	rcall	.+950    	; 0x548 <SendString>
		for (int i = 0; i<512; i++)
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	d0 e0       	ldi	r29, 0x00	; 0
 196:	09 c0       	rjmp	.+18     	; 0x1aa <main+0x86>
		{
			SendInteger(buffer[i]);
 198:	fe 01       	movw	r30, r28
 19a:	e4 5b       	subi	r30, 0xB4	; 180
 19c:	fd 4f       	sbci	r31, 0xFD	; 253
 19e:	80 81       	ld	r24, Z
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	de d1       	rcall	.+956    	; 0x560 <SendInteger>
			SendChar(' ');
 1a4:	80 e2       	ldi	r24, 0x20	; 32
 1a6:	c9 d1       	rcall	.+914    	; 0x53a <SendChar>
 1a8:	21 96       	adiw	r28, 0x01	; 1
		
        SD_readSingleBlock(Block_2);
		SendString("\nBlock ");
		SendLong(Block_2);
		SendString(" =\n");
		for (int i = 0; i<512; i++)
 1aa:	c1 15       	cp	r28, r1
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	d8 07       	cpc	r29, r24
 1b0:	9c f3       	brlt	.-26     	; 0x198 <main+0x74>
		{
			SendInteger(buffer[i]);
			SendChar(' ');
		}
		char x = ReadChar();
 1b2:	bc d1       	rcall	.+888    	; 0x52c <ReadChar>
 1b4:	c8 2f       	mov	r28, r24
		
		if (x == 'e')
 1b6:	85 36       	cpi	r24, 0x65	; 101
 1b8:	e1 f4       	brne	.+56     	; 0x1f2 <main+0xce>
		{
	        SD_erase (Block_1, Block_2-Block_1+1);			
 1ba:	2a eb       	ldi	r18, 0xBA	; 186
 1bc:	33 ed       	ldi	r19, 0xD3	; 211
 1be:	42 e1       	ldi	r20, 0x12	; 18
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	6e ec       	ldi	r22, 0xCE	; 206
 1c4:	72 e0       	ldi	r23, 0x02	; 2
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
		    SendString("\nSD Blocks from ");
 1ca:	2e d1       	rcall	.+604    	; 0x428 <SD_erase>
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	92 e0       	ldi	r25, 0x02	; 2
		    SendLong(Block_1);
 1d0:	bb d1       	rcall	.+886    	; 0x548 <SendString>
 1d2:	6e ec       	ldi	r22, 0xCE	; 206
 1d4:	72 e0       	ldi	r23, 0x02	; 2
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	dd d1       	rcall	.+954    	; 0x596 <SendLong>
		    SendString(" to ");
 1dc:	8d e1       	ldi	r24, 0x1D	; 29
 1de:	92 e0       	ldi	r25, 0x02	; 2
 1e0:	b3 d1       	rcall	.+870    	; 0x548 <SendString>
 1e2:	67 e8       	ldi	r22, 0x87	; 135
		    SendLong(Block_2);
 1e4:	76 ed       	ldi	r23, 0xD6	; 214
 1e6:	82 e1       	ldi	r24, 0x12	; 18
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	d5 d1       	rcall	.+938    	; 0x596 <SendLong>
 1ec:	82 e2       	ldi	r24, 0x22	; 34
 1ee:	92 e0       	ldi	r25, 0x02	; 2
		    SendString("erased\n");									
 1f0:	ab d1       	rcall	.+854    	; 0x548 <SendString>
 1f2:	c1 33       	cpi	r28, 0x31	; 49
 1f4:	e9 f4       	brne	.+58     	; 0x230 <main+0x10c>
		}
		
		if (x == '1')
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <main+0xe0>
 1f8:	fc 01       	movw	r30, r24
		{
			for (int i = 0; i<512; i++)
			{
				buffer[i] = i;
 1fa:	e4 5b       	subi	r30, 0xB4	; 180
 1fc:	fd 4f       	sbci	r31, 0xFD	; 253
 1fe:	80 83       	st	Z, r24
		    SendString("erased\n");									
		}
		
		if (x == '1')
		{
			for (int i = 0; i<512; i++)
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	02 c0       	rjmp	.+4      	; 0x208 <main+0xe4>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	81 15       	cp	r24, r1
 20a:	22 e0       	ldi	r18, 0x02	; 2
 20c:	92 07       	cpc	r25, r18
			{
				buffer[i] = i;
			}
			SD_writeSingleBlock(Block_1);			
 20e:	a4 f3       	brlt	.-24     	; 0x1f8 <main+0xd4>
 210:	6e ec       	ldi	r22, 0xCE	; 206
 212:	72 e0       	ldi	r23, 0x02	; 2
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	09 d1       	rcall	.+530    	; 0x42c <SD_writeSingleBlock>
			SendString("\nBlock ");
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	92 e0       	ldi	r25, 0x02	; 2
 21e:	94 d1       	rcall	.+808    	; 0x548 <SendString>
 220:	6e ec       	ldi	r22, 0xCE	; 206
			SendLong(Block_1);
 222:	72 e0       	ldi	r23, 0x02	; 2
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	b6 d1       	rcall	.+876    	; 0x596 <SendLong>
 22a:	8a e2       	ldi	r24, 0x2A	; 42
			SendString(" programmed with 0,1,2,3,...\n");
 22c:	92 e0       	ldi	r25, 0x02	; 2
 22e:	8c d1       	rcall	.+792    	; 0x548 <SendString>
 230:	c2 33       	cpi	r28, 0x32	; 50
		}
		
		if (x == '2')
 232:	09 f0       	breq	.+2      	; 0x236 <main+0x112>
 234:	7e cf       	rjmp	.-260    	; 0x132 <main+0xe>
 236:	06 c0       	rjmp	.+12     	; 0x244 <main+0x120>
		{
			for (int i = 0; i<512; i++)
			{
				buffer[i] = i;
 238:	fc 01       	movw	r30, r24
 23a:	e4 5b       	subi	r30, 0xB4	; 180
 23c:	fd 4f       	sbci	r31, 0xFD	; 253
			SendString(" programmed with 0,1,2,3,...\n");
		}
		
		if (x == '2')
		{
			for (int i = 0; i<512; i++)
 23e:	80 83       	st	Z, r24
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	02 c0       	rjmp	.+4      	; 0x248 <main+0x124>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	81 15       	cp	r24, r1
 24a:	22 e0       	ldi	r18, 0x02	; 2
 24c:	92 07       	cpc	r25, r18
			{
				buffer[i] = i;
			}
			SD_writeSingleBlock(Block_2);
 24e:	a4 f3       	brlt	.-24     	; 0x238 <main+0x114>
 250:	67 e8       	ldi	r22, 0x87	; 135
 252:	76 ed       	ldi	r23, 0xD6	; 214
 254:	82 e1       	ldi	r24, 0x12	; 18
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	e9 d0       	rcall	.+466    	; 0x42c <SD_writeSingleBlock>
			SendString("\nBlock ");
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	92 e0       	ldi	r25, 0x02	; 2
 25e:	74 d1       	rcall	.+744    	; 0x548 <SendString>
 260:	67 e8       	ldi	r22, 0x87	; 135
			SendLong(Block_2);
 262:	76 ed       	ldi	r23, 0xD6	; 214
 264:	82 e1       	ldi	r24, 0x12	; 18
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	96 d1       	rcall	.+812    	; 0x596 <SendLong>
 26a:	8a e2       	ldi	r24, 0x2A	; 42
 26c:	92 e0       	ldi	r25, 0x02	; 2
			SendString(" programmed with 0,1,2,3,...\n");
 26e:	6c d1       	rcall	.+728    	; 0x548 <SendString>
 270:	60 cf       	rjmp	.-320    	; 0x132 <main+0xe>

00000272 <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
 272:	cf 92       	push	r12
 274:	df 92       	push	r13
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	18 2f       	mov	r17, r24
 282:	6a 01       	movw	r12, r20
 284:	7b 01       	movw	r14, r22

	//SD card accepts byte address while SDHC accepts block address in multiples of 512
	//so, if it's SD card we need to convert block address into corresponding byte address by 
	//multiplying it with 512. which is equivalent to shifting it left 9 times.
	//The following 'if' statement does that
	if(SDHC_flag == 0)
 286:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <SDHC_flag>
 28a:	81 11       	cpse	r24, r1
 28c:	15 c0       	rjmp	.+42     	; 0x2b8 <SD_sendCommand+0x46>
	{
		if(cmd == READ_SINGLE_BLOCK      ||
 28e:	8f ee       	ldi	r24, 0xEF	; 239
 290:	81 0f       	add	r24, r17
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	40 f0       	brcs	.+16     	; 0x2a6 <SD_sendCommand+0x34>
		   cmd == READ_MULTIPLE_BLOCKS   ||
 296:	18 31       	cpi	r17, 0x18	; 24
 298:	31 f0       	breq	.+12     	; 0x2a6 <SD_sendCommand+0x34>
		   cmd == WRITE_SINGLE_BLOCK     ||
 29a:	19 31       	cpi	r17, 0x19	; 25
 29c:	21 f0       	breq	.+8      	; 0x2a6 <SD_sendCommand+0x34>
		   cmd == WRITE_MULTIPLE_BLOCKS  ||
 29e:	10 32       	cpi	r17, 0x20	; 32
 2a0:	11 f0       	breq	.+4      	; 0x2a6 <SD_sendCommand+0x34>
		   cmd == ERASE_BLOCK_START_ADDR ||
 2a2:	11 32       	cpi	r17, 0x21	; 33
 2a4:	49 f4       	brne	.+18     	; 0x2b8 <SD_sendCommand+0x46>
		   cmd == ERASE_BLOCK_END_ADDR)
		   {
			   arg = arg << 9;
 2a6:	0b 2e       	mov	r0, r27
 2a8:	b9 e0       	ldi	r27, 0x09	; 9
 2aa:	cc 0c       	add	r12, r12
 2ac:	dd 1c       	adc	r13, r13
 2ae:	ee 1c       	adc	r14, r14
 2b0:	ff 1c       	adc	r15, r15
 2b2:	ba 95       	dec	r27
 2b4:	d1 f7       	brne	.-12     	; 0x2aa <SD_sendCommand+0x38>
 2b6:	b0 2d       	mov	r27, r0
		   }
    }

	SPI_Chip_Select();
 2b8:	d7 d0       	rcall	.+430    	; 0x468 <SPI_Chip_Select>
	SPI_transmit(cmd | 0b01000000); //send command, the first two bits are always '01'
 2ba:	81 2f       	mov	r24, r17
 2bc:	80 64       	ori	r24, 0x40	; 64
 2be:	c7 d0       	rcall	.+398    	; 0x44e <SPI_transmit>
	SPI_transmit(arg >> 24);
 2c0:	8f 2d       	mov	r24, r15
 2c2:	c5 d0       	rcall	.+394    	; 0x44e <SPI_transmit>
	SPI_transmit(arg >> 16);
 2c4:	8e 2d       	mov	r24, r14
 2c6:	c3 d0       	rcall	.+390    	; 0x44e <SPI_transmit>
	SPI_transmit(arg >> 8);
 2c8:	8d 2d       	mov	r24, r13
 2ca:	c1 d0       	rcall	.+386    	; 0x44e <SPI_transmit>
 2cc:	8c 2d       	mov	r24, r12
	SPI_transmit(arg);
 2ce:	bf d0       	rcall	.+382    	; 0x44e <SPI_transmit>
 2d0:	18 30       	cpi	r17, 0x08	; 8

	if(cmd == SEND_IF_COND)	//it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
 2d2:	19 f4       	brne	.+6      	; 0x2da <SD_sendCommand+0x68>
		SPI_transmit(0x87); //for remaining commands, CRC is ignored in SPI mode
 2d4:	87 e8       	ldi	r24, 0x87	; 135
 2d6:	bb d0       	rcall	.+374    	; 0x44e <SPI_transmit>
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <SD_sendCommand+0x7a>
 2da:	85 e9       	ldi	r24, 0x95	; 149
	else 
		SPI_transmit(0x95); 
 2dc:	b8 d0       	rcall	.+368    	; 0x44e <SPI_transmit>
 2de:	06 c0       	rjmp	.+12     	; 0x2ec <SD_sendCommand+0x7a>
 2e0:	81 e0       	ldi	r24, 0x01	; 1

	while((response = SPI_receive()) == 0xff) //wait for response
	{
		if(retry++ > 254)
 2e2:	8c 0f       	add	r24, r28
 2e4:	cf 3f       	cpi	r28, 0xFF	; 255
 2e6:	39 f0       	breq	.+14     	; 0x2f6 <SD_sendCommand+0x84>
 2e8:	c8 2f       	mov	r28, r24
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <SD_sendCommand+0x7c>
 2ec:	c0 e0       	ldi	r28, 0x00	; 0
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
 2ee:	b5 d0       	rcall	.+362    	; 0x45a <SPI_receive>
	if(cmd == SEND_IF_COND)	//it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
		SPI_transmit(0x87); //for remaining commands, CRC is ignored in SPI mode
	else 
		SPI_transmit(0x95); 

	while((response = SPI_receive()) == 0xff) //wait for response
 2f0:	d8 2f       	mov	r29, r24
 2f2:	8f 3f       	cpi	r24, 0xFF	; 255
 2f4:	a9 f3       	breq	.-22     	; 0x2e0 <SD_sendCommand+0x6e>
 2f6:	d1 11       	cpse	r29, r1
	{
		if(retry++ > 254)
			break; //time out error
	}

	if(response == 0x00 && cmd == READ_OCR) //checking response of CMD58
 2f8:	0e c0       	rjmp	.+28     	; 0x316 <SD_sendCommand+0xa4>
 2fa:	1a 33       	cpi	r17, 0x3A	; 58
 2fc:	61 f4       	brne	.+24     	; 0x316 <SD_sendCommand+0xa4>
 2fe:	ad d0       	rcall	.+346    	; 0x45a <SPI_receive>
	{
		status = SPI_receive() & 0x40; //first byte of the OCR register (bit 31:24)
 300:	86 ff       	sbrs	r24, 6
		if(status == 0x40)
 302:	04 c0       	rjmp	.+8      	; 0x30c <SD_sendCommand+0x9a>
			SDHC_flag = 1; //we need it to verify SDHC card
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <SDHC_flag>
		else
			SDHC_flag = 0;
 30a:	02 c0       	rjmp	.+4      	; 0x310 <SD_sendCommand+0x9e>

		SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
 30c:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <SDHC_flag>
		SPI_receive(); //one can use these bytes to check power supply limits of SD
 310:	a4 d0       	rcall	.+328    	; 0x45a <SPI_receive>
 312:	a3 d0       	rcall	.+326    	; 0x45a <SPI_receive>
		SPI_receive(); 
 314:	a2 d0       	rcall	.+324    	; 0x45a <SPI_receive>
 316:	16 32       	cpi	r17, 0x26	; 38
	}

    // This is added by Henning Hargaard 6/3 2020 (Response = 1b => busy while reading 0)
	if (cmd == ERASE_SELECTED_BLOCKS)
 318:	19 f4       	brne	.+6      	; 0x320 <SD_sendCommand+0xae>
 31a:	9f d0       	rcall	.+318    	; 0x45a <SPI_receive>
	{
		while (SPI_receive() == 0)
 31c:	88 23       	and	r24, r24
 31e:	e9 f3       	breq	.-6      	; 0x31a <SD_sendCommand+0xa8>
 320:	9c d0       	rcall	.+312    	; 0x45a <SPI_receive>
 322:	a6 d0       	rcall	.+332    	; 0x470 <SPI_Chip_Deselect>
		{}
	}
    
	SPI_receive(); //extra 8 CLK
 324:	8d 2f       	mov	r24, r29
 326:	df 91       	pop	r29
	SPI_Chip_Deselect();
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
	return response; //return state
}
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	df 90       	pop	r13
 332:	cf 90       	pop	r12
 334:	08 95       	ret

00000336 <SD_init>:
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	78 d0       	rcall	.+240    	; 0x42e <SPI_init>
	unsigned char i, response, SD_version;
	unsigned int retry = 0;	
	
	SPI_init();
		
	for(i = 0; i < 10; i++)
 33e:	c0 e0       	ldi	r28, 0x00	; 0
 340:	03 c0       	rjmp	.+6      	; 0x348 <SD_init+0x12>
	{
		SPI_transmit(0xff); //80 clock pulses before sending the first command (Only needs 76, but we just do 80 to be sure)
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	84 d0       	rcall	.+264    	; 0x44e <SPI_transmit>
	unsigned char i, response, SD_version;
	unsigned int retry = 0;	
	
	SPI_init();
		
	for(i = 0; i < 10; i++)
 346:	cf 5f       	subi	r28, 0xFF	; 255
 348:	ca 30       	cpi	r28, 0x0A	; 10
	{
		SPI_transmit(0xff); //80 clock pulses before sending the first command (Only needs 76, but we just do 80 to be sure)
	}
	
	SPI_Chip_Select();
 34a:	d8 f3       	brcs	.-10     	; 0x342 <SD_init+0xc>
 34c:	8d d0       	rcall	.+282    	; 0x468 <SPI_Chip_Select>
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init()
{
	unsigned char i, response, SD_version;
	unsigned int retry = 0;	
 34e:	c0 e0       	ldi	r28, 0x00	; 0
 350:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	SPI_Chip_Select();
	do
	{
		response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command (= CMD0)
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	ba 01       	movw	r22, r20
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	8b df       	rcall	.-234    	; 0x272 <SD_sendCommand>
		retry++;
 35c:	21 96       	adiw	r28, 0x01	; 1
		if(retry > 0x20)
 35e:	c1 32       	cpi	r28, 0x21	; 33
 360:	d1 05       	cpc	r29, r1
 362:	08 f0       	brcs	.+2      	; 0x366 <SD_init+0x30>
			return 1; //time out, card not detected
	} while(response != 0x01); //repeat until SD is in IDLE state
 364:	5a c0       	rjmp	.+180    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>

	SPI_Chip_Deselect();
 366:	81 30       	cpi	r24, 0x01	; 1
	SPI_transmit (0xff);
 368:	a1 f7       	brne	.-24     	; 0x352 <SD_init+0x1c>
 36a:	82 d0       	rcall	.+260    	; 0x470 <SPI_Chip_Deselect>
 36c:	8f ef       	ldi	r24, 0xFF	; 255
	SPI_transmit (0xff);
 36e:	6f d0       	rcall	.+222    	; 0x44e <SPI_transmit>
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	6d d0       	rcall	.+218    	; 0x44e <SPI_transmit>

	retry = 0;
 374:	c0 e0       	ldi	r28, 0x00	; 0
	
	SD_version = 2; //default set to SD compliance with ver2.x;
					//this may change after checking the next command
	do
	{
		response = SD_sendCommand(SEND_IF_COND, 0x000001AA); //Check power supply status, mandatory for SDHC card (= CMD8)
 376:	d0 e0       	ldi	r29, 0x00	; 0
 378:	4a ea       	ldi	r20, 0xAA	; 170
 37a:	51 e0       	ldi	r21, 0x01	; 1
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	88 e0       	ldi	r24, 0x08	; 8
 382:	77 df       	rcall	.-274    	; 0x272 <SD_sendCommand>
		retry++;
 384:	21 96       	adiw	r28, 0x01	; 1
		if(retry > 0xfe)
 386:	cf 3f       	cpi	r28, 0xFF	; 255
 388:	d1 05       	cpc	r29, r1
 38a:	28 f0       	brcs	.+10     	; 0x396 <SD_init+0x60>
		{
			SD_version = 1;
			cardType = 1;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <cardType>
	{
		response = SD_sendCommand(SEND_IF_COND, 0x000001AA); //Check power supply status, mandatory for SDHC card (= CMD8)
		retry++;
		if(retry > 0xfe)
		{
			SD_version = 1;
 392:	11 e0       	ldi	r17, 0x01	; 1
			cardType = 1;
			break;
 394:	03 c0       	rjmp	.+6      	; 0x39c <SD_init+0x66>
		} //time out
	} while(response != 0x01);
 396:	81 30       	cpi	r24, 0x01	; 1
	SPI_transmit (0xff);
	SPI_transmit (0xff);

	retry = 0;
	
	SD_version = 2; //default set to SD compliance with ver2.x;
 398:	79 f7       	brne	.-34     	; 0x378 <SD_init+0x42>
			cardType = 1;
			break;
		} //time out
	} while(response != 0x01);
	
	retry = 0;
 39a:	12 e0       	ldi	r17, 0x02	; 2
 39c:	c0 e0       	ldi	r28, 0x00	; 0
	do
	{
		response = SD_sendCommand(APP_CMD, 0); //CMD55, must be sent before sending any ACMD command
 39e:	d0 e0       	ldi	r29, 0x00	; 0
 3a0:	40 e0       	ldi	r20, 0x00	; 0
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	ba 01       	movw	r22, r20
 3a6:	87 e3       	ldi	r24, 0x37	; 55
		response = SD_sendCommand(SD_SEND_OP_COND, 0x40000000); //ACMD41
 3a8:	64 df       	rcall	.-312    	; 0x272 <SD_sendCommand>
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	70 e4       	ldi	r23, 0x40	; 64
 3b2:	89 e2       	ldi	r24, 0x29	; 41
 3b4:	5e df       	rcall	.-324    	; 0x272 <SD_sendCommand>

		retry++;
 3b6:	21 96       	adiw	r28, 0x01	; 1
		if(retry > 0xfe)
 3b8:	cf 3f       	cpi	r28, 0xFF	; 255
 3ba:	d1 05       	cpc	r29, r1
 3bc:	80 f5       	brcc	.+96     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			return 2;  //time out, card initialization failed
	} while(response != 0x00);
 3be:	81 11       	cpse	r24, r1
 3c0:	ef cf       	rjmp	.-34     	; 0x3a0 <SD_init+0x6a>
	
	retry = 0;
	SDHC_flag = 0;
 3c2:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <SDHC_flag>
	
	if (SD_version == 2)
 3c6:	12 30       	cpi	r17, 0x02	; 2
 3c8:	d9 f4       	brne	.+54     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ca:	c0 e0       	ldi	r28, 0x00	; 0
	{
		do
		{
			response = SD_sendCommand(READ_OCR, 0); // (=CMD58)
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	ba 01       	movw	r22, r20
 3d4:	8a e3       	ldi	r24, 0x3A	; 58
 3d6:	4d df       	rcall	.-358    	; 0x272 <SD_sendCommand>
			retry++;
 3d8:	21 96       	adiw	r28, 0x01	; 1
			if(retry > 0xfe)
 3da:	cf 3f       	cpi	r28, 0xFF	; 255
 3dc:	d1 05       	cpc	r29, r1
 3de:	18 f0       	brcs	.+6      	; 0x3e6 <SD_init+0xb0>
			{
				cardType = 0;
 3e0:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <cardType>
				break;
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <SD_init+0xb4>
			} //time out
		} while(response != 0x00);
 3e6:	81 11       	cpse	r24, r1
 3e8:	f2 cf       	rjmp	.-28     	; 0x3ce <SD_init+0x98>
		
		if(SDHC_flag == 1)
 3ea:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <SDHC_flag>
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	21 f4       	brne	.+8      	; 0x3fa <SD_init+0xc4>
			cardType = 2;
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <cardType>
		else
			cardType = 3;
 3f8:	03 c0       	rjmp	.+6      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fa:	83 e0       	ldi	r24, 0x03	; 3
	}

	SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; default - CRC disabled in SPI mode
 3fc:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <cardType>
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	ba 01       	movw	r22, r20
 406:	8b e3       	ldi	r24, 0x3B	; 59
	SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512
 408:	34 df       	rcall	.-408    	; 0x272 <SD_sendCommand>
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	52 e0       	ldi	r21, 0x02	; 2
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	80 e1       	ldi	r24, 0x10	; 16
 414:	2e df       	rcall	.-420    	; 0x272 <SD_sendCommand>
	
	return 0; //successful return
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	03 c0       	rjmp	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	do
	{
		response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command (= CMD0)
		retry++;
		if(retry > 0x20)
			return 1; //time out, card not detected
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	01 c0       	rjmp	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		response = SD_sendCommand(APP_CMD, 0); //CMD55, must be sent before sending any ACMD command
		response = SD_sendCommand(SD_SEND_OP_COND, 0x40000000); //ACMD41

		retry++;
		if(retry > 0xfe)
			return 2;  //time out, card initialization failed
 41e:	82 e0       	ldi	r24, 0x02	; 2

	SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; default - CRC disabled in SPI mode
	SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512
	
	return 0; //successful return
}
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	08 95       	ret

00000428 <SD_erase>:
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long numberOfBlocks)
{
  // To be implemented
}
 428:	08 95       	ret

0000042a <SD_readSingleBlock>:
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
  // To be implemented
}
 42a:	08 95       	ret

0000042c <SD_writeSingleBlock>:
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
  // To be implemented
 42c:	08 95       	ret

0000042e <SPI_init>:
#include "SPI_Driver.h"

//SPI initialize for SD card
void SPI_init(void)
{
	SPI_DDR |= 1 << SS_BIT;
 42e:	84 b1       	in	r24, 0x04	; 4
 430:	81 60       	ori	r24, 0x01	; 1
 432:	84 b9       	out	0x04, r24	; 4
	SPI_DDR |= 1 << MOSI_BIT;
 434:	84 b1       	in	r24, 0x04	; 4
 436:	84 60       	ori	r24, 0x04	; 4
 438:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~(1 << MISO_BIT);
 43a:	84 b1       	in	r24, 0x04	; 4
 43c:	87 7f       	andi	r24, 0xF7	; 247
 43e:	84 b9       	out	0x04, r24	; 4
	SPI_DDR |= 1 << SCK_BIT;
 440:	84 b1       	in	r24, 0x04	; 4
 442:	82 60       	ori	r24, 0x02	; 2
 444:	84 b9       	out	0x04, r24	; 4
	//Setup SPI: Enable, Master mode, MSB first, SCK phase low, SCK idle low, f = fosc/64 = 16 MHz/64 = 250 kHz
	SPCR = 0b01010010;
 446:	82 e5       	ldi	r24, 0x52	; 82
 448:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
 44a:	1d bc       	out	0x2d, r1	; 45
 44c:	08 95       	ret

0000044e <SPI_transmit>:
void SPI_transmit(unsigned char data)
{
unsigned char dummy;
	
	// Start transmission
	SPDR = data;
 44e:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)))
 450:	0d b4       	in	r0, 0x2d	; 45
 452:	07 fe       	sbrs	r0, 7
 454:	fd cf       	rjmp	.-6      	; 0x450 <SPI_transmit+0x2>
	{}
    // Clear flag 		
	dummy = SPDR;
 456:	8e b5       	in	r24, 0x2e	; 46
 458:	08 95       	ret

0000045a <SPI_receive>:
unsigned char SPI_receive()
{
	unsigned char data;
	// Wait for reception complete

	SPDR = 0xff;
 45a:	8f ef       	ldi	r24, 0xFF	; 255
 45c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 45e:	0d b4       	in	r0, 0x2d	; 45
 460:	07 fe       	sbrs	r0, 7
 462:	fd cf       	rjmp	.-6      	; 0x45e <SPI_receive+0x4>
	data = SPDR;
 464:	8e b5       	in	r24, 0x2e	; 46

	// Return data register
	return data;
}
 466:	08 95       	ret

00000468 <SPI_Chip_Select>:

// CS active (=low)
void SPI_Chip_Select()
{
	SPI_PORT &= ~(1 << SS_BIT);
 468:	85 b1       	in	r24, 0x05	; 5
 46a:	8e 7f       	andi	r24, 0xFE	; 254
 46c:	85 b9       	out	0x05, r24	; 5
 46e:	08 95       	ret

00000470 <SPI_Chip_Deselect>:
}

// CS inactive (=high)
void SPI_Chip_Deselect()
{
	SPI_PORT |= (1 << SS_BIT);
 470:	85 b1       	in	r24, 0x05	; 5
 472:	81 60       	ori	r24, 0x01	; 1
 474:	85 b9       	out	0x05, r24	; 5
 476:	08 95       	ret

00000478 <InitUART>:
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady()
{
   return UCSR0A & (1<<7);
}
 478:	cf 92       	push	r12
 47a:	df 92       	push	r13
 47c:	ef 92       	push	r14
 47e:	ff 92       	push	r15
 480:	0f 93       	push	r16
 482:	1f 93       	push	r17
 484:	8b 01       	movw	r16, r22
 486:	9c 01       	movw	r18, r24
 488:	0c 52       	subi	r16, 0x2C	; 44
 48a:	11 40       	sbci	r17, 0x01	; 1
 48c:	21 09       	sbc	r18, r1
 48e:	31 09       	sbc	r19, r1
 490:	05 3d       	cpi	r16, 0xD5	; 213
 492:	10 4c       	sbci	r17, 0xC0	; 192
 494:	21 40       	sbci	r18, 0x01	; 1
 496:	31 05       	cpc	r19, r1
 498:	08 f0       	brcs	.+2      	; 0x49c <InitUART+0x24>
 49a:	41 c0       	rjmp	.+130    	; 0x51e <InitUART+0xa6>
 49c:	45 30       	cpi	r20, 0x05	; 5
 49e:	08 f4       	brcc	.+2      	; 0x4a2 <InitUART+0x2a>
 4a0:	3e c0       	rjmp	.+124    	; 0x51e <InitUART+0xa6>
 4a2:	49 30       	cpi	r20, 0x09	; 9
 4a4:	e0 f5       	brcc	.+120    	; 0x51e <InitUART+0xa6>
 4a6:	20 e2       	ldi	r18, 0x20	; 32
 4a8:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 4ac:	28 e1       	ldi	r18, 0x18	; 24
 4ae:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 4b2:	45 50       	subi	r20, 0x05	; 5
 4b4:	44 0f       	add	r20, r20
 4b6:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 4ba:	6b 01       	movw	r12, r22
 4bc:	7c 01       	movw	r14, r24
 4be:	20 e8       	ldi	r18, 0x80	; 128
 4c0:	c2 0e       	add	r12, r18
 4c2:	24 e8       	ldi	r18, 0x84	; 132
 4c4:	d2 1e       	adc	r13, r18
 4c6:	2e e1       	ldi	r18, 0x1E	; 30
 4c8:	e2 1e       	adc	r14, r18
 4ca:	f1 1c       	adc	r15, r1
 4cc:	cc 0c       	add	r12, r12
 4ce:	dd 1c       	adc	r13, r13
 4d0:	ee 1c       	adc	r14, r14
 4d2:	ff 1c       	adc	r15, r15
 4d4:	cc 0c       	add	r12, r12
 4d6:	dd 1c       	adc	r13, r13
 4d8:	ee 1c       	adc	r14, r14
 4da:	ff 1c       	adc	r15, r15
 4dc:	cc 0c       	add	r12, r12
 4de:	dd 1c       	adc	r13, r13
 4e0:	ee 1c       	adc	r14, r14
 4e2:	ff 1c       	adc	r15, r15
 4e4:	dc 01       	movw	r26, r24
 4e6:	cb 01       	movw	r24, r22
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	aa 1f       	adc	r26, r26
 4ee:	bb 1f       	adc	r27, r27
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	aa 1f       	adc	r26, r26
 4f6:	bb 1f       	adc	r27, r27
 4f8:	9c 01       	movw	r18, r24
 4fa:	ad 01       	movw	r20, r26
 4fc:	22 0f       	add	r18, r18
 4fe:	33 1f       	adc	r19, r19
 500:	44 1f       	adc	r20, r20
 502:	55 1f       	adc	r21, r21
 504:	22 0f       	add	r18, r18
 506:	33 1f       	adc	r19, r19
 508:	44 1f       	adc	r20, r20
 50a:	55 1f       	adc	r21, r21
 50c:	c7 01       	movw	r24, r14
 50e:	b6 01       	movw	r22, r12
 510:	5d d0       	rcall	.+186    	; 0x5cc <__udivmodsi4>
 512:	21 50       	subi	r18, 0x01	; 1
 514:	31 09       	sbc	r19, r1
 516:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 51a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	ff 90       	pop	r15
 524:	ef 90       	pop	r14
 526:	df 90       	pop	r13
 528:	cf 90       	pop	r12
 52a:	08 95       	ret

0000052c <ReadChar>:
Then this character is returned.
*************************************************************************/
char ReadChar()
{
  // Wait for new character received
  while ( (UCSR0A & (1<<7)) == 0 )
 52c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 530:	88 23       	and	r24, r24
 532:	e4 f7       	brge	.-8      	; 0x52c <ReadChar>
  {}                        
  // Then return it
  return UDR0;
 534:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
 538:	08 95       	ret

0000053a <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR0A & (1<<5)) == 0 )
 53a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 53e:	95 ff       	sbrs	r25, 5
 540:	fc cf       	rjmp	.-8      	; 0x53a <SendChar>
  {}
  // Then send the character
  UDR0 = Tegn;
 542:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 546:	08 95       	ret

00000548 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	ec 01       	movw	r28, r24
  // Repeat until zero-termination
  while (*Streng != 0)
 54e:	02 c0       	rjmp	.+4      	; 0x554 <SendString+0xc>
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
 550:	f4 df       	rcall	.-24     	; 0x53a <SendChar>
    // Advance the pointer one step
    Streng++;
 552:	21 96       	adiw	r28, 0x01	; 1
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 554:	88 81       	ld	r24, Y
 556:	81 11       	cpse	r24, r1
 558:	fb cf       	rjmp	.-10     	; 0x550 <SendString+0x8>
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(int Tal)
{
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	27 97       	sbiw	r28, 0x07	; 7
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	de bf       	out	0x3e, r29	; 62
 570:	0f be       	out	0x3f, r0	; 63
 572:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 574:	4a e0       	ldi	r20, 0x0A	; 10
 576:	be 01       	movw	r22, r28
 578:	6f 5f       	subi	r22, 0xFF	; 255
 57a:	7f 4f       	sbci	r23, 0xFF	; 255
 57c:	49 d0       	rcall	.+146    	; 0x610 <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(array);
 57e:	ce 01       	movw	r24, r28
 580:	01 96       	adiw	r24, 0x01	; 1
 582:	e2 df       	rcall	.-60     	; 0x548 <SendString>
}
 584:	27 96       	adiw	r28, 0x07	; 7
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <SendLong>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The long to be converted and sent. 
*************************************************************************/
void SendLong(long Tal)
{
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	cd b7       	in	r28, 0x3d	; 61
 59c:	de b7       	in	r29, 0x3e	; 62
 59e:	2b 97       	sbiw	r28, 0x0b	; 11
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	f8 94       	cli
 5a4:	de bf       	out	0x3e, r29	; 62
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 5aa:	2a e0       	ldi	r18, 0x0A	; 10
 5ac:	ae 01       	movw	r20, r28
 5ae:	4f 5f       	subi	r20, 0xFF	; 255
 5b0:	5f 4f       	sbci	r21, 0xFF	; 255
 5b2:	38 d0       	rcall	.+112    	; 0x624 <__ltoa_ncheck>
char array[11];
  // Convert the integer to an ASCII string (array), radix = 10 
  ltoa(Tal, array, 10);
  // - then send the string
  SendString(array);
 5b4:	ce 01       	movw	r24, r28
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	c7 df       	rcall	.-114    	; 0x548 <SendString>
}
 5ba:	2b 96       	adiw	r28, 0x0b	; 11
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	f8 94       	cli
 5c0:	de bf       	out	0x3e, r29	; 62
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	cd bf       	out	0x3d, r28	; 61
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	08 95       	ret

000005cc <__udivmodsi4>:
 5cc:	a1 e2       	ldi	r26, 0x21	; 33
 5ce:	1a 2e       	mov	r1, r26
 5d0:	aa 1b       	sub	r26, r26
 5d2:	bb 1b       	sub	r27, r27
 5d4:	fd 01       	movw	r30, r26
 5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <__udivmodsi4_ep>

000005d8 <__udivmodsi4_loop>:
 5d8:	aa 1f       	adc	r26, r26
 5da:	bb 1f       	adc	r27, r27
 5dc:	ee 1f       	adc	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	a2 17       	cp	r26, r18
 5e2:	b3 07       	cpc	r27, r19
 5e4:	e4 07       	cpc	r30, r20
 5e6:	f5 07       	cpc	r31, r21
 5e8:	20 f0       	brcs	.+8      	; 0x5f2 <__udivmodsi4_ep>
 5ea:	a2 1b       	sub	r26, r18
 5ec:	b3 0b       	sbc	r27, r19
 5ee:	e4 0b       	sbc	r30, r20
 5f0:	f5 0b       	sbc	r31, r21

000005f2 <__udivmodsi4_ep>:
 5f2:	66 1f       	adc	r22, r22
 5f4:	77 1f       	adc	r23, r23
 5f6:	88 1f       	adc	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	1a 94       	dec	r1
 5fc:	69 f7       	brne	.-38     	; 0x5d8 <__udivmodsi4_loop>
 5fe:	60 95       	com	r22
 600:	70 95       	com	r23
 602:	80 95       	com	r24
 604:	90 95       	com	r25
 606:	9b 01       	movw	r18, r22
 608:	ac 01       	movw	r20, r24
 60a:	bd 01       	movw	r22, r26
 60c:	cf 01       	movw	r24, r30
 60e:	08 95       	ret

00000610 <__itoa_ncheck>:
 610:	bb 27       	eor	r27, r27
 612:	4a 30       	cpi	r20, 0x0A	; 10
 614:	31 f4       	brne	.+12     	; 0x622 <__itoa_ncheck+0x12>
 616:	99 23       	and	r25, r25
 618:	22 f4       	brpl	.+8      	; 0x622 <__itoa_ncheck+0x12>
 61a:	bd e2       	ldi	r27, 0x2D	; 45
 61c:	90 95       	com	r25
 61e:	81 95       	neg	r24
 620:	9f 4f       	sbci	r25, 0xFF	; 255
 622:	30 c0       	rjmp	.+96     	; 0x684 <__utoa_common>

00000624 <__ltoa_ncheck>:
 624:	bb 27       	eor	r27, r27
 626:	2a 30       	cpi	r18, 0x0A	; 10
 628:	51 f4       	brne	.+20     	; 0x63e <__ltoa_ncheck+0x1a>
 62a:	99 23       	and	r25, r25
 62c:	42 f4       	brpl	.+16     	; 0x63e <__ltoa_ncheck+0x1a>
 62e:	bd e2       	ldi	r27, 0x2D	; 45
 630:	90 95       	com	r25
 632:	80 95       	com	r24
 634:	70 95       	com	r23
 636:	61 95       	neg	r22
 638:	7f 4f       	sbci	r23, 0xFF	; 255
 63a:	8f 4f       	sbci	r24, 0xFF	; 255
 63c:	9f 4f       	sbci	r25, 0xFF	; 255
 63e:	01 c0       	rjmp	.+2      	; 0x642 <__ultoa_common>

00000640 <__ultoa_ncheck>:
 640:	bb 27       	eor	r27, r27

00000642 <__ultoa_common>:
 642:	fa 01       	movw	r30, r20
 644:	a6 2f       	mov	r26, r22
 646:	62 17       	cp	r22, r18
 648:	71 05       	cpc	r23, r1
 64a:	81 05       	cpc	r24, r1
 64c:	91 05       	cpc	r25, r1
 64e:	33 0b       	sbc	r19, r19
 650:	30 fb       	bst	r19, 0
 652:	66 f0       	brts	.+24     	; 0x66c <__ultoa_common+0x2a>
 654:	aa 27       	eor	r26, r26
 656:	66 0f       	add	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	88 1f       	adc	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	aa 1f       	adc	r26, r26
 660:	a2 17       	cp	r26, r18
 662:	10 f0       	brcs	.+4      	; 0x668 <__ultoa_common+0x26>
 664:	a2 1b       	sub	r26, r18
 666:	63 95       	inc	r22
 668:	38 50       	subi	r19, 0x08	; 8
 66a:	a9 f7       	brne	.-22     	; 0x656 <__ultoa_common+0x14>
 66c:	a0 5d       	subi	r26, 0xD0	; 208
 66e:	aa 33       	cpi	r26, 0x3A	; 58
 670:	08 f0       	brcs	.+2      	; 0x674 <__ultoa_common+0x32>
 672:	a9 5d       	subi	r26, 0xD9	; 217
 674:	a1 93       	st	Z+, r26
 676:	36 f7       	brtc	.-52     	; 0x644 <__ultoa_common+0x2>
 678:	b1 11       	cpse	r27, r1
 67a:	b1 93       	st	Z+, r27
 67c:	10 82       	st	Z, r1
 67e:	ca 01       	movw	r24, r20
 680:	19 c0       	rjmp	.+50     	; 0x6b4 <strrev>

00000682 <__utoa_ncheck>:
 682:	bb 27       	eor	r27, r27

00000684 <__utoa_common>:
 684:	fb 01       	movw	r30, r22
 686:	55 27       	eor	r21, r21
 688:	aa 27       	eor	r26, r26
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	aa 1f       	adc	r26, r26
 690:	a4 17       	cp	r26, r20
 692:	10 f0       	brcs	.+4      	; 0x698 <__utoa_common+0x14>
 694:	a4 1b       	sub	r26, r20
 696:	83 95       	inc	r24
 698:	50 51       	subi	r21, 0x10	; 16
 69a:	b9 f7       	brne	.-18     	; 0x68a <__utoa_common+0x6>
 69c:	a0 5d       	subi	r26, 0xD0	; 208
 69e:	aa 33       	cpi	r26, 0x3A	; 58
 6a0:	08 f0       	brcs	.+2      	; 0x6a4 <__utoa_common+0x20>
 6a2:	a9 5d       	subi	r26, 0xD9	; 217
 6a4:	a1 93       	st	Z+, r26
 6a6:	00 97       	sbiw	r24, 0x00	; 0
 6a8:	79 f7       	brne	.-34     	; 0x688 <__utoa_common+0x4>
 6aa:	b1 11       	cpse	r27, r1
 6ac:	b1 93       	st	Z+, r27
 6ae:	11 92       	st	Z+, r1
 6b0:	cb 01       	movw	r24, r22
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <strrev>

000006b4 <strrev>:
 6b4:	dc 01       	movw	r26, r24
 6b6:	fc 01       	movw	r30, r24
 6b8:	67 2f       	mov	r22, r23
 6ba:	71 91       	ld	r23, Z+
 6bc:	77 23       	and	r23, r23
 6be:	e1 f7       	brne	.-8      	; 0x6b8 <strrev+0x4>
 6c0:	32 97       	sbiw	r30, 0x02	; 2
 6c2:	04 c0       	rjmp	.+8      	; 0x6cc <strrev+0x18>
 6c4:	7c 91       	ld	r23, X
 6c6:	6d 93       	st	X+, r22
 6c8:	70 83       	st	Z, r23
 6ca:	62 91       	ld	r22, -Z
 6cc:	ae 17       	cp	r26, r30
 6ce:	bf 07       	cpc	r27, r31
 6d0:	c8 f3       	brcs	.-14     	; 0x6c4 <strrev+0x10>
 6d2:	08 95       	ret

000006d4 <_exit>:
 6d4:	f8 94       	cli

000006d6 <__stop_program>:
 6d6:	ff cf       	rjmp	.-2      	; 0x6d6 <__stop_program>
