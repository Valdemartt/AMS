
GraphicalDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000394  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001550  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dbd  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006f5  00000000  00000000  0000281d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00002f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006cc  00000000  00000000  000030b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000607  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003d87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	01 d1       	rcall	.+514    	; 0x2f8 <main>
  f6:	4c c1       	rjmp	.+664    	; 0x390 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <WriteCommand>:
	DisplayInversionOff();
}

void DisplayInversionOn()
{
	WriteCommand(0b00100001);
  fa:	5f 98       	cbi	0x0b, 7	; 11
  fc:	88 b9       	out	0x08, r24	; 8
  fe:	a2 98       	cbi	0x14, 2	; 20
 100:	00 00       	nop
 102:	a2 9a       	sbi	0x14, 2	; 20
 104:	00 00       	nop
 106:	08 95       	ret

00000108 <WriteData>:
 108:	5f 9a       	sbi	0x0b, 7	; 11
 10a:	92 b9       	out	0x02, r25	; 2
 10c:	88 b9       	out	0x08, r24	; 8
 10e:	a2 98       	cbi	0x14, 2	; 20
 110:	00 00       	nop
 112:	a2 9a       	sbi	0x14, 2	; 20
 114:	00 00       	nop
 116:	08 95       	ret

00000118 <DisplayOn>:
 118:	89 e2       	ldi	r24, 0x29	; 41
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	ee cf       	rjmp	.-36     	; 0xfa <WriteCommand>
 11e:	08 95       	ret

00000120 <SleepOut>:
 120:	81 e1       	ldi	r24, 0x11	; 17
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	ea df       	rcall	.-44     	; 0xfa <WriteCommand>
 126:	8f e3       	ldi	r24, 0x3F	; 63
 128:	9c e9       	ldi	r25, 0x9C	; 156
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <SleepOut+0xa>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <SleepOut+0x10>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <Reset>:
 134:	24 b3       	in	r18, 0x14	; 20
 136:	44 b3       	in	r20, 0x14	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	bc 01       	movw	r22, r24
 13e:	02 c0       	rjmp	.+4      	; 0x144 <Reset+0x10>
 140:	66 0f       	add	r22, r22
 142:	77 1f       	adc	r23, r23
 144:	2a 95       	dec	r18
 146:	e2 f7       	brpl	.-8      	; 0x140 <Reset+0xc>
 148:	9b 01       	movw	r18, r22
 14a:	20 95       	com	r18
 14c:	30 95       	com	r19
 14e:	24 23       	and	r18, r20
 150:	24 bb       	out	0x14, r18	; 20
 152:	7f ef       	ldi	r23, 0xFF	; 255
 154:	29 e6       	ldi	r18, 0x69	; 105
 156:	38 e1       	ldi	r19, 0x18	; 24
 158:	71 50       	subi	r23, 0x01	; 1
 15a:	20 40       	sbci	r18, 0x00	; 0
 15c:	30 40       	sbci	r19, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <Reset+0x24>
 160:	00 c0       	rjmp	.+0      	; 0x162 <Reset+0x2e>
 162:	00 00       	nop
 164:	34 b3       	in	r19, 0x14	; 20
 166:	24 b3       	in	r18, 0x14	; 20
 168:	02 c0       	rjmp	.+4      	; 0x16e <Reset+0x3a>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	3a 95       	dec	r19
 170:	e2 f7       	brpl	.-8      	; 0x16a <Reset+0x36>
 172:	82 2b       	or	r24, r18
 174:	84 bb       	out	0x14, r24	; 20
 176:	4f ef       	ldi	r20, 0xFF	; 255
 178:	68 e5       	ldi	r22, 0x58	; 88
 17a:	76 e0       	ldi	r23, 0x06	; 6
 17c:	41 50       	subi	r20, 0x01	; 1
 17e:	60 40       	sbci	r22, 0x00	; 0
 180:	70 40       	sbci	r23, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <Reset+0x48>
 184:	00 c0       	rjmp	.+0      	; 0x186 <Reset+0x52>
 186:	00 00       	nop
 188:	08 95       	ret

0000018a <MemoryAccessControl>:
 18a:	cf 93       	push	r28
 18c:	c8 2f       	mov	r28, r24
 18e:	86 e3       	ldi	r24, 0x36	; 54
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	b3 df       	rcall	.-154    	; 0xfa <WriteCommand>
 194:	8c 2f       	mov	r24, r28
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	b7 df       	rcall	.-146    	; 0x108 <WriteData>
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <InterfacePixelFormat>:
 19e:	cf 93       	push	r28
 1a0:	c8 2f       	mov	r28, r24
 1a2:	8a e3       	ldi	r24, 0x3A	; 58
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	a9 df       	rcall	.-174    	; 0xfa <WriteCommand>
 1a8:	8c 2f       	mov	r24, r28
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	ad df       	rcall	.-166    	; 0x108 <WriteData>
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <DisplayInit>:
 1b2:	57 9a       	sbi	0x0a, 7	; 10
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	81 b9       	out	0x01, r24	; 1
 1b8:	87 b9       	out	0x07, r24	; 7
 1ba:	9a 9a       	sbi	0x13, 2	; 19
 1bc:	99 9a       	sbi	0x13, 1	; 19
 1be:	98 9a       	sbi	0x13, 0	; 19
 1c0:	5f 9a       	sbi	0x0b, 7	; 11
 1c2:	a2 9a       	sbi	0x14, 2	; 20
 1c4:	a1 98       	cbi	0x14, 1	; 20
 1c6:	a0 9a       	sbi	0x14, 0	; 20
 1c8:	b5 df       	rcall	.-150    	; 0x134 <Reset>
 1ca:	aa df       	rcall	.-172    	; 0x120 <SleepOut>
 1cc:	a5 df       	rcall	.-182    	; 0x118 <DisplayOn>
 1ce:	8f e1       	ldi	r24, 0x1F	; 31
 1d0:	9e e4       	ldi	r25, 0x4E	; 78
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <DisplayInit+0x20>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <DisplayInit+0x26>
 1d8:	00 00       	nop
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	d6 df       	rcall	.-84     	; 0x18a <MemoryAccessControl>
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	de cf       	rjmp	.-68     	; 0x19e <InterfacePixelFormat>
 1e2:	08 95       	ret

000001e4 <MemoryWrite>:
 1e4:	8c e2       	ldi	r24, 0x2C	; 44
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	88 cf       	rjmp	.-240    	; 0xfa <WriteCommand>
 1ea:	08 95       	ret

000001ec <WritePixel>:
 1ec:	6f 73       	andi	r22, 0x3F	; 63
 1ee:	90 e4       	ldi	r25, 0x40	; 64
 1f0:	69 9f       	mul	r22, r25
 1f2:	b0 01       	movw	r22, r0
 1f4:	11 24       	eor	r1, r1
 1f6:	4f 71       	andi	r20, 0x1F	; 31
 1f8:	64 2b       	or	r22, r20
 1fa:	8f 71       	andi	r24, 0x1F	; 31
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	98 2f       	mov	r25, r24
 200:	88 27       	eor	r24, r24
 202:	92 95       	swap	r25
 204:	90 7f       	andi	r25, 0xF0	; 240
 206:	86 2b       	or	r24, r22
 208:	97 2b       	or	r25, r23
 20a:	7e cf       	rjmp	.-260    	; 0x108 <WriteData>
 20c:	08 95       	ret

0000020e <SetColumnAddress>:
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	08 2f       	mov	r16, r24
 218:	d9 2f       	mov	r29, r25
 21a:	16 2f       	mov	r17, r22
 21c:	c7 2f       	mov	r28, r23
 21e:	8a e2       	ldi	r24, 0x2A	; 42
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	6b df       	rcall	.-298    	; 0xfa <WriteCommand>
 224:	8d 2f       	mov	r24, r29
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	6f df       	rcall	.-290    	; 0x108 <WriteData>
 22a:	80 2f       	mov	r24, r16
 22c:	9d 2f       	mov	r25, r29
 22e:	6c df       	rcall	.-296    	; 0x108 <WriteData>
 230:	8c 2f       	mov	r24, r28
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	69 df       	rcall	.-302    	; 0x108 <WriteData>
 236:	81 2f       	mov	r24, r17
 238:	9c 2f       	mov	r25, r28
 23a:	66 df       	rcall	.-308    	; 0x108 <WriteData>
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	08 95       	ret

00000246 <SetPageAddress>:
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	08 2f       	mov	r16, r24
 250:	d9 2f       	mov	r29, r25
 252:	16 2f       	mov	r17, r22
 254:	c7 2f       	mov	r28, r23
 256:	8b e2       	ldi	r24, 0x2B	; 43
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	4f df       	rcall	.-354    	; 0xfa <WriteCommand>
 25c:	8d 2f       	mov	r24, r29
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	53 df       	rcall	.-346    	; 0x108 <WriteData>
 262:	80 2f       	mov	r24, r16
 264:	9d 2f       	mov	r25, r29
 266:	50 df       	rcall	.-352    	; 0x108 <WriteData>
 268:	8c 2f       	mov	r24, r28
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	4d df       	rcall	.-358    	; 0x108 <WriteData>
 26e:	81 2f       	mov	r24, r17
 270:	9c 2f       	mov	r25, r28
 272:	4a df       	rcall	.-364    	; 0x108 <WriteData>
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <DisplayInversionOff>:
}

void DisplayInversionOff()
{
	WriteCommand(0b00100000);
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	3b cf       	rjmp	.-394    	; 0xfa <WriteCommand>
 284:	08 95       	ret

00000286 <FillRectangle>:
// Fills rectangle with specified color
// (StartX,StartY) = Upper left corner. X horizontal (0-319) , Y vertical (0-239).
// Height (1-240) is vertical. Width (1-320) is horizontal.
// R-G-B = 5-6-5 bits.
void FillRectangle(unsigned int StartX, unsigned int StartY, unsigned int Width, unsigned int Height, unsigned char Red, unsigned char Green, unsigned char Blue)
{
 286:	8f 92       	push	r8
 288:	9f 92       	push	r9
 28a:	af 92       	push	r10
 28c:	bf 92       	push	r11
 28e:	cf 92       	push	r12
 290:	ef 92       	push	r14
 292:	0f 93       	push	r16
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	5b 01       	movw	r10, r22
 29a:	4a 01       	movw	r8, r20
 29c:	e9 01       	movw	r28, r18
	SetPageAddress(StartX, (StartX + Width) - 1);
 29e:	ba 01       	movw	r22, r20
 2a0:	61 50       	subi	r22, 0x01	; 1
 2a2:	71 09       	sbc	r23, r1
 2a4:	68 0f       	add	r22, r24
 2a6:	79 1f       	adc	r23, r25
 2a8:	ce df       	rcall	.-100    	; 0x246 <SetPageAddress>
	SetColumnAddress(StartY, (StartY + Height) - 1);
 2aa:	be 01       	movw	r22, r28
 2ac:	61 50       	subi	r22, 0x01	; 1
 2ae:	71 09       	sbc	r23, r1
 2b0:	6a 0d       	add	r22, r10
 2b2:	7b 1d       	adc	r23, r11
 2b4:	c5 01       	movw	r24, r10
	MemoryWrite();
 2b6:	ab df       	rcall	.-170    	; 0x20e <SetColumnAddress>
 2b8:	95 df       	rcall	.-214    	; 0x1e4 <MemoryWrite>
	for(int i = 0; i < (Width * Height); ++i)
 2ba:	8c 9e       	mul	r8, r28
 2bc:	50 01       	movw	r10, r0
 2be:	8d 9e       	mul	r8, r29
 2c0:	b0 0c       	add	r11, r0
 2c2:	9c 9e       	mul	r9, r28
 2c4:	b0 0c       	add	r11, r0
 2c6:	11 24       	eor	r1, r1
 2c8:	a1 14       	cp	r10, r1
 2ca:	b1 04       	cpc	r11, r1
 2cc:	51 f0       	breq	.+20     	; 0x2e2 <FillRectangle+0x5c>
 2ce:	c0 e0       	ldi	r28, 0x00	; 0
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		WritePixel(Red, Green, Blue);	
 2d2:	4c 2d       	mov	r20, r12
 2d4:	6e 2d       	mov	r22, r14
 2d6:	80 2f       	mov	r24, r16
 2d8:	89 df       	rcall	.-238    	; 0x1ec <WritePixel>
void FillRectangle(unsigned int StartX, unsigned int StartY, unsigned int Width, unsigned int Height, unsigned char Red, unsigned char Green, unsigned char Blue)
{
	SetPageAddress(StartX, (StartX + Width) - 1);
	SetColumnAddress(StartY, (StartY + Height) - 1);
	MemoryWrite();
	for(int i = 0; i < (Width * Height); ++i)
 2da:	21 96       	adiw	r28, 0x01	; 1
 2dc:	ca 15       	cp	r28, r10
 2de:	db 05       	cpc	r29, r11
	{
		WritePixel(Red, Green, Blue);	
	}
	//Dummy command
	DisplayInversionOff();
 2e0:	c1 f7       	brne	.-16     	; 0x2d2 <FillRectangle+0x4c>
 2e2:	cd df       	rcall	.-102    	; 0x27e <DisplayInversionOff>
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	0f 91       	pop	r16
 2ea:	ef 90       	pop	r14
 2ec:	cf 90       	pop	r12
 2ee:	bf 90       	pop	r11
 2f0:	af 90       	pop	r10
 2f2:	9f 90       	pop	r9
 2f4:	8f 90       	pop	r8
 2f6:	08 95       	ret

000002f8 <main>:
#include "TFTdriver.h"

int main(void)
{
  // Initialize the display
  DisplayInit();
 2f8:	5c df       	rcall	.-328    	; 0x1b2 <DisplayInit>
  // All pixels white (background)
  FillRectangle(0,0,340,180,31,63,31);
 2fa:	0f 2e       	mov	r0, r31
 2fc:	ff e1       	ldi	r31, 0x1F	; 31
 2fe:	cf 2e       	mov	r12, r31
 300:	f0 2d       	mov	r31, r0
 302:	0f 2e       	mov	r0, r31
 304:	ff e3       	ldi	r31, 0x3F	; 63
 306:	ef 2e       	mov	r14, r31
 308:	f0 2d       	mov	r31, r0
 30a:	0f e1       	ldi	r16, 0x1F	; 31
 30c:	24 eb       	ldi	r18, 0xB4	; 180
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	44 e5       	ldi	r20, 0x54	; 84
 312:	51 e0       	ldi	r21, 0x01	; 1
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	b4 df       	rcall	.-152    	; 0x286 <FillRectangle>
  FillRectangle(0,180,340,60,31,63,31);
 31e:	2c e3       	ldi	r18, 0x3C	; 60
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	44 e5       	ldi	r20, 0x54	; 84
 324:	51 e0       	ldi	r21, 0x01	; 1
 326:	64 eb       	ldi	r22, 0xB4	; 180
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	ab df       	rcall	.-170    	; 0x286 <FillRectangle>
  // Draw red parts of danish flag
  FillRectangle(0,140,100,100,31,0,0);
 330:	c1 2c       	mov	r12, r1
 332:	e1 2c       	mov	r14, r1
 334:	24 e6       	ldi	r18, 0x64	; 100
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	44 e6       	ldi	r20, 0x64	; 100
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	6c e8       	ldi	r22, 0x8C	; 140
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	a0 df       	rcall	.-192    	; 0x286 <FillRectangle>
  FillRectangle(0,0,100,100,31,0,0);
 346:	24 e6       	ldi	r18, 0x64	; 100
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	44 e6       	ldi	r20, 0x64	; 100
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	97 df       	rcall	.-210    	; 0x286 <FillRectangle>
  FillRectangle(140,0,320-140,100,31,0,0);
 358:	24 e6       	ldi	r18, 0x64	; 100
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	44 eb       	ldi	r20, 0xB4	; 180
 35e:	50 e0       	ldi	r21, 0x00	; 0
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	8c e8       	ldi	r24, 0x8C	; 140
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	8e df       	rcall	.-228    	; 0x286 <FillRectangle>
  FillRectangle(140,140,320-140,100,31,0,0);      
 36a:	24 e6       	ldi	r18, 0x64	; 100
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	44 eb       	ldi	r20, 0xB4	; 180
 370:	50 e0       	ldi	r21, 0x00	; 0
 372:	6c e8       	ldi	r22, 0x8C	; 140
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	8c e8       	ldi	r24, 0x8C	; 140
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	85 df       	rcall	.-246    	; 0x286 <FillRectangle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	2f ef       	ldi	r18, 0xFF	; 255
 37e:	83 ed       	ldi	r24, 0xD3	; 211
 380:	90 e3       	ldi	r25, 0x30	; 48
 382:	21 50       	subi	r18, 0x01	; 1
 384:	80 40       	sbci	r24, 0x00	; 0
 386:	90 40       	sbci	r25, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <main+0x8a>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0x94>
 38c:	00 00       	nop
 38e:	f6 cf       	rjmp	.-20     	; 0x37c <main+0x84>

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
